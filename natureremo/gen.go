// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package natureremo

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// AirConParams defines model for AirConParams_.
type AirConParams struct {
	// AirDirection AC air direction. Empty means automatic.
	AirDirection *string `json:"air_direction,omitempty"`

	// AirDirectionH AC horizontal air direction.
	AirDirectionH *string `json:"air_direction_h,omitempty"`

	// AirVolume AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
	AirVolume *string `json:"air_volume,omitempty"`

	// Button Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.
	Button *string `json:"button,omitempty"`

	// OperationMode AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.
	OperationMode *string `json:"operation_mode,omitempty"`

	// Temperature Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
	Temperature *string `json:"temperature,omitempty"`

	// TemperatureUnit Temperature unit. 'c' or 'f' or '' for unknown.
	TemperatureUnit *string `json:"temperature_unit,omitempty"`
}

// AirconSettingsResponse defines model for AirconSettingsResponse.
type AirconSettingsResponse struct {
	// Button Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.
	Button *string `json:"button,omitempty"`

	// Dir AC air direction. Empty means automatic.
	Dir *string `json:"dir,omitempty"`

	// Dirh AC horizontal air direction.
	Dirh *string `json:"dirh,omitempty"`

	// Mode AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.
	Mode *string `json:"mode,omitempty"`

	// Temp Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
	Temp *string `json:"temp,omitempty"`

	// TempUnit Temperature unit. 'c' or 'f' or '' for unknown.
	TempUnit  *string    `json:"temp_unit,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Vol AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
	Vol *string `json:"vol,omitempty"`
}

// ApplianceModelAndParam defines model for ApplianceModelAndParam.
type ApplianceModelAndParam struct {
	Model *struct {
		Country      *string `json:"country,omitempty"`
		Id           *string `json:"id,omitempty"`
		Image        *string `json:"image,omitempty"`
		Manufacturer *string `json:"manufacturer,omitempty"`
		Name         *string `json:"name,omitempty"`
		RemoteName   *string `json:"remote_name,omitempty"`
		Series       *string `json:"series,omitempty"`
	} `json:"model,omitempty"`
	Params *struct {
		// Button Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.
		Button *string `json:"button,omitempty"`

		// Dir AC air direction. Empty means automatic.
		Dir *string `json:"dir,omitempty"`

		// Dirh AC horizontal air direction.
		Dirh *string `json:"dirh,omitempty"`

		// Mode AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.
		Mode *string `json:"mode,omitempty"`

		// Temp Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
		Temp *string `json:"temp,omitempty"`

		// TempUnit Temperature unit. 'c' or 'f' or '' for unknown.
		TempUnit *string `json:"temp_unit,omitempty"`

		// Vol AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
		Vol *string `json:"vol,omitempty"`
	} `json:"params,omitempty"`
}

// ApplianceModelAndParams defines model for ApplianceModelAndParams.
type ApplianceModelAndParams = []ApplianceModelAndParam

// ApplianceParams defines model for ApplianceParams.
type ApplianceParams struct {
	// Image Basename of the image file included in the app. Ex: 'ico_ac_1'.
	Image *string `json:"image,omitempty"`

	// Nickname Appliance name.
	Nickname *string `json:"nickname,omitempty"`
}

// ApplianceResponse defines model for ApplianceResponse.
type ApplianceResponse struct {
	Aircon *struct {
		Range *struct {
			FixedButtons *[]string `json:"fixedButtons,omitempty"`
			Modes        *map[string]struct {
				Dir  *[]string `json:"dir,omitempty"`
				Dirh *[]string `json:"dirh,omitempty"`
				Temp *[]string `json:"temp,omitempty"`
				Vol  *[]string `json:"vol,omitempty"`
			} `json:"modes,omitempty"`
		} `json:"range,omitempty"`
		TempUnit *string `json:"tempUnit,omitempty"`
	} `json:"aircon,omitempty"`
	AirconSmartEcoMode *struct {
		Adjusting *bool `json:"adjusting,omitempty"`
		Area      *int  `json:"area,omitempty"`
		Enabled   *bool `json:"enabled,omitempty"`
	} `json:"aircon_smart_eco_mode,omitempty"`
	Ble *struct {
		Addr     *interface{} `json:"addr,omitempty"`
		AddrType *string      `json:"addr_type,omitempty"`
		Bonded   *bool        `json:"bonded,omitempty"`
		Macros   *map[string]struct {
			Id  *interface{} `json:"id,omitempty"`
			Url *string      `json:"url,omitempty"`
		} `json:"macros,omitempty"`
		Sesame *struct {
			DeviceType *string      `json:"device_type,omitempty"`
			KeyLevel   *string      `json:"key_level,omitempty"`
			UserIndex  *[]byte      `json:"user_index,omitempty"`
			Uuid       *interface{} `json:"uuid,omitempty"`
		} `json:"sesame,omitempty"`
	} `json:"ble,omitempty"`
	Device *struct {
		BtMacAddress      *string    `json:"bt_mac_address,omitempty"`
		CreatedAt         *time.Time `json:"created_at,omitempty"`
		FirmwareVersion   *string    `json:"firmware_version,omitempty"`
		HumidityOffset    *float32   `json:"humidity_offset,omitempty"`
		Id                *string    `json:"id,omitempty"`
		MacAddress        *string    `json:"mac_address,omitempty"`
		Name              *string    `json:"name,omitempty"`
		SerialNumber      *string    `json:"serial_number,omitempty"`
		TemperatureOffset *float32   `json:"temperature_offset,omitempty"`
		UpdatedAt         *time.Time `json:"updated_at,omitempty"`
	} `json:"device,omitempty"`

	// Echonetlite The ECHONET lite properties fetched from the appliance. See 'Detailed Requirements for ECHONET Device Objects' for more details. ref. https://echonet.jp/spec_object_rl_en/
	Echonetlite *struct {
		GetProperties *map[string]struct {
			Enum *[]string `json:"enum,omitempty"`
			Type *string   `json:"type,omitempty"`
		} `json:"get_properties,omitempty"`
		Identifier *string `json:"identifier,omitempty"`
		Instance   *string `json:"instance,omitempty"`
		Ip         *string `json:"ip,omitempty"`
		Localize   *struct {
			Properties *map[string]struct {
				Enum *map[string]struct {
					Label *string `json:"label,omitempty"`
				} `json:"enum,omitempty"`
			} `json:"properties,omitempty"`
		} `json:"localize,omitempty"`
		RouteType     *string `json:"route_type,omitempty"`
		SetProperties *map[string]struct {
			Enum *[]string `json:"enum,omitempty"`
			Type *string   `json:"type,omitempty"`
		} `json:"set_properties,omitempty"`
		State   *interface{} `json:"state,omitempty"`
		Version *string      `json:"version,omitempty"`
	} `json:"echonetlite,omitempty"`
	Id    *string `json:"id,omitempty"`
	Image *string `json:"image,omitempty"`
	Light *struct {
		Buttons *[]struct {
			Image *string `json:"image,omitempty"`
			Label *string `json:"label,omitempty"`
			Name  *string `json:"name,omitempty"`
		} `json:"buttons,omitempty"`
		State *struct {
			Brightness *string `json:"brightness,omitempty"`
			LastButton *string `json:"last_button,omitempty"`
			Power      *string `json:"power,omitempty"`
		} `json:"state,omitempty"`
	} `json:"light,omitempty"`
	LightProjector *struct {
		Layout *struct {
			Image     *string `json:"image,omitempty"`
			Label     *string `json:"label,omitempty"`
			Name      *string `json:"name,omitempty"`
			Templates *[]struct {
				Image     *string     `json:"image,omitempty"`
				Label     *string     `json:"label,omitempty"`
				Name      *string     `json:"name,omitempty"`
				Templates *[]Template `json:"templates,omitempty"`
				Text      *string     `json:"text,omitempty"`
				Type      *string     `json:"type,omitempty"`
				Uuid      *string     `json:"uuid,omitempty"`
				XSize     *int        `json:"x_size,omitempty"`
				YSize     *int        `json:"y_size,omitempty"`
			} `json:"templates,omitempty"`
			Text  *string `json:"text,omitempty"`
			Type  *string `json:"type,omitempty"`
			Uuid  *string `json:"uuid,omitempty"`
			XSize *int    `json:"x_size,omitempty"`
			YSize *int    `json:"y_size,omitempty"`
		} `json:"layout,omitempty"`
	} `json:"light_projector,omitempty"`
	Model      *interface{} `json:"model,omitempty"`
	MorninPlus *struct {
		Devices *[]struct {
			Active *bool   `json:"active,omitempty"`
			Id     *string `json:"id,omitempty"`
			Image  *string `json:"image,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"devices,omitempty"`
		HiSpeedMode *bool `json:"hi_speed_mode,omitempty"`
	} `json:"mornin_plus,omitempty"`
	Nickname *string `json:"nickname,omitempty"`
	QrioLock *struct {
		BdAddress *string `json:"bd_address,omitempty"`
		Device    *struct {
			Id    *int32  `json:"id,omitempty"`
			Image *string `json:"image,omitempty"`
			Name  *string `json:"name,omitempty"`
		} `json:"device,omitempty"`
		IsAvailable  *bool   `json:"is_available,omitempty"`
		SubBdAddress *string `json:"sub_bd_address,omitempty"`
	} `json:"qrio_lock,omitempty"`
	Settings *struct {
		// Button Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.
		Button *string `json:"button,omitempty"`

		// Dir AC air direction. Empty means automatic.
		Dir *string `json:"dir,omitempty"`

		// Dirh AC horizontal air direction.
		Dirh *string `json:"dirh,omitempty"`

		// Mode AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.
		Mode *string `json:"mode,omitempty"`

		// Temp Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
		Temp *string `json:"temp,omitempty"`

		// TempUnit Temperature unit. 'c' or 'f' or '' for unknown.
		TempUnit  *string    `json:"temp_unit,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`

		// Vol AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
		Vol *string `json:"vol,omitempty"`
	} `json:"settings,omitempty"`
	Signals *[]struct {
		Id    *string `json:"id,omitempty"`
		Image *string `json:"image,omitempty"`
		Name  *string `json:"name,omitempty"`
	} `json:"signals,omitempty"`
	SmartMeter *struct {
		EchonetliteProperties *[]struct {
			Epc       *int       `json:"epc,omitempty"`
			Name      *string    `json:"name,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			Val       *string    `json:"val,omitempty"`
		} `json:"echonetlite_properties,omitempty"`
	} `json:"smart_meter,omitempty"`
	Tv *struct {
		Buttons *[]struct {
			Image *string `json:"image,omitempty"`
			Label *string `json:"label,omitempty"`
			Name  *string `json:"name,omitempty"`
		} `json:"buttons,omitempty"`
		Layout *[]struct {
			Buttons *[]string `json:"buttons,omitempty"`
			Type    *string   `json:"type,omitempty"`
		} `json:"layout,omitempty"`
		State *struct {
			Input *string `json:"input,omitempty"`
		} `json:"state,omitempty"`
	} `json:"tv,omitempty"`

	// Type Appliance types. AC, TV, LIGHT, etc.
	Type *string `json:"type,omitempty"`
}

// ApplianceResponses defines model for ApplianceResponses.
type ApplianceResponses = []ApplianceResponse

// BLEPrivateMacroResponse defines model for BLEPrivateMacroResponse.
type BLEPrivateMacroResponse struct {
	Id  *interface{} `json:"id,omitempty"`
	Url *string      `json:"url,omitempty"`
}

// BLEPrivateMacroResponses defines model for BLEPrivateMacroResponses.
type BLEPrivateMacroResponses = []BLEPrivateMacroResponse

// CreateApplianceRequest defines model for CreateApplianceRequest.
type CreateApplianceRequest struct {
	Device *string `json:"device,omitempty"`

	// Image Basename of the image file included in the app. Ex: 'ico_ac_1'.
	Image *string `json:"image,omitempty"`

	// Model ApplianceModel ID if the appliance we're trying to create is included in IRDB.
	Model *string `json:"model,omitempty"`

	// ModelType Enum of 'AC', 'TV', 'Light'
	ModelType *string `json:"model_type,omitempty"`

	// Nickname Appliance name.
	Nickname *string `json:"nickname,omitempty"`
}

// CreateSignalParameters defines model for CreateSignalParameters.
type CreateSignalParameters struct {
	// Image Basename of the image file included in the app. Ex: 'ico_io'.
	Image *string `json:"Image,omitempty"`

	// Message JSON serialized object describing infrared signals. Includes 'data', 'freq' and 'format' keys.
	Message *string `json:"Message,omitempty"`

	// Name Signal name.
	Name *string `json:"Name,omitempty"`
}

// DetectApplianceRequest defines model for DetectApplianceRequest.
type DetectApplianceRequest struct {
	Device *string `json:"Device,omitempty"`

	// Message JSON serialized object describing infrared signals. Includes 'data', 'freq' and 'format' keys.
	Message *string `json:"Message,omitempty"`
}

// DeviceResponse defines model for DeviceResponse.
type DeviceResponse struct {
	BtMacAddress    *string    `json:"bt_mac_address,omitempty"`
	CreatedAt       *time.Time `json:"created_at,omitempty"`
	FirmwareVersion *string    `json:"firmware_version,omitempty"`
	HumidityOffset  *float32   `json:"humidity_offset,omitempty"`
	Id              *string    `json:"id,omitempty"`
	MacAddress      *string    `json:"mac_address,omitempty"`
	Name            *string    `json:"name,omitempty"`

	// NewestEvents The SensorValue key means 'te' = temperature, 'hu' = humidity, 'il' = illumination, 'mo' = movement. The val of 'mo' is always 1 and when movement event is captured created_at is updated.
	NewestEvents *map[string]struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Val       *float32   `json:"val,omitempty"`
	} `json:"newest_events,omitempty"`
	Online            *bool      `json:"online,omitempty"`
	SerialNumber      *string    `json:"serial_number,omitempty"`
	TemperatureOffset *float32   `json:"temperature_offset,omitempty"`
	UpdatedAt         *time.Time `json:"updated_at,omitempty"`

	// Users Deprecated. Do not use in new code.
	Users *[]struct {
		Id        *string `json:"id,omitempty"`
		Nickname  *string `json:"nickname,omitempty"`
		Superuser *bool   `json:"superuser,omitempty"`
	} `json:"users,omitempty"`
}

// DeviceResponses defines model for DeviceResponses.
type DeviceResponses = []DeviceResponse

// EchonetLiteApplianceResponse defines model for EchonetLiteApplianceResponse.
type EchonetLiteApplianceResponse struct {
	Appliances *[]struct {
		Device *struct {
			BtMacAddress      *string    `json:"bt_mac_address,omitempty"`
			CreatedAt         *time.Time `json:"created_at,omitempty"`
			FirmwareVersion   *string    `json:"firmware_version,omitempty"`
			HumidityOffset    *float32   `json:"humidity_offset,omitempty"`
			Id                *string    `json:"id,omitempty"`
			MacAddress        *string    `json:"mac_address,omitempty"`
			Name              *string    `json:"name,omitempty"`
			SerialNumber      *string    `json:"serial_number,omitempty"`
			TemperatureOffset *float32   `json:"temperature_offset,omitempty"`
			UpdatedAt         *time.Time `json:"updated_at,omitempty"`
		} `json:"Device,omitempty"`
		Id         *string `json:"id,omitempty"`
		Nickname   *string `json:"nickname,omitempty"`
		Properties *[]struct {
			Epc       *string    `json:"epc,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			Val       *string    `json:"val,omitempty"`
		} `json:"properties,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"appliances,omitempty"`
}

// EmptyObject defines model for EmptyObject.
type EmptyObject = map[string]interface{}

// HomeInvite defines model for HomeInvite.
type HomeInvite struct {
	Home *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"home,omitempty"`
	Url  *string `json:"url,omitempty"`
	User *struct {
		Id       *string `json:"id,omitempty"`
		Nickname *string `json:"nickname,omitempty"`
	} `json:"user,omitempty"`
}

// HomeParams defines model for HomeParams.
type HomeParams struct {
	Name *string `json:"name,omitempty"`
}

// HomeResponse defines model for HomeResponse.
type HomeResponse struct {
	Id       *string `json:"id,omitempty"`
	Location *struct {
		Latitude  *float64 `json:"latitude,omitempty"`
		Longitude *float64 `json:"longitude,omitempty"`
		Radius    *float32 `json:"radius,omitempty"`
	} `json:"location,omitempty"`
	Name *string `json:"name,omitempty"`
	Town *struct {
		Id         *int32   `json:"id,omitempty"`
		Latitude   *float64 `json:"latitude,omitempty"`
		Longitude  *float64 `json:"longitude,omitempty"`
		Name       *string  `json:"name,omitempty"`
		Origin     *string  `json:"origin,omitempty"`
		Prefecture *string  `json:"prefecture,omitempty"`
	} `json:"town,omitempty"`
	Users *[]struct {
		Id            *string    `json:"id,omitempty"`
		JoinedAt      *time.Time `json:"joined_at,omitempty"`
		LocationState *string    `json:"location_state,omitempty"`
		Nickname      *string    `json:"nickname,omitempty"`
		Role          *string    `json:"role,omitempty"`
	} `json:"users,omitempty"`
}

// HomeResponses defines model for HomeResponses.
type HomeResponses = []HomeResponse

// HomeUserParams defines model for HomeUserParams.
type HomeUserParams struct {
	User *string `json:"user,omitempty"`
}

// HumidityOffsetParams defines model for HumidityOffsetParams.
type HumidityOffsetParams struct {
	// Offset Humidity offset value added to the measured humidity.
	Offset *float32 `json:"Offset,omitempty"`
}

// LightParams defines model for LightParams.
type LightParams struct {
	// Button Button name.
	Button *string `json:"button,omitempty"`
}

// LightProjectorParams defines model for LightProjectorParams.
type LightProjectorParams struct {
	// Button Button name.
	Button *string `json:"button,omitempty"`
}

// LightState defines model for LightState.
type LightState struct {
	Brightness *string `json:"brightness,omitempty"`
	LastButton *string `json:"last_button,omitempty"`
	Power      *string `json:"power,omitempty"`
}

// RefreshELPropertyRequest defines model for RefreshELPropertyRequest.
type RefreshELPropertyRequest struct {
	// EPC Comma separated EPCs in hex. eg: cf,da
	EPC *string `json:"EPC,omitempty"`
}

// ReorderAppliancesParams defines model for ReorderAppliancesParams.
type ReorderAppliancesParams struct {
	// Appliances List of all appliance IDs, comma separated.
	Appliances *string `json:"Appliances,omitempty"`
}

// ReorderSignalsParams defines model for ReorderSignalsParams.
type ReorderSignalsParams struct {
	// Signals List of all signal IDs, comma separated.
	Signals *string `json:"Signals,omitempty"`
}

// SetELPropertyRequest defines model for SetELPropertyRequest.
type SetELPropertyRequest struct {
	// EPC EPC in hex string. eg: cf
	EPC *string `json:"EPC,omitempty"`

	// Val Value in hex string. String length must be 2x the number of bytes according to ECHONET Lite spec, and filled with zero if necessary. eg: 000000FF
	Val *string `json:"Val,omitempty"`
}

// Signal defines model for Signal.
type Signal struct {
	Id    *string `json:"id,omitempty"`
	Image *string `json:"image,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// Signals defines model for Signals.
type Signals = []Signal

// TVParams defines model for TVParams.
type TVParams struct {
	// Button Button name.
	Button *string `json:"button,omitempty"`
}

// TVState defines model for TVState.
type TVState struct {
	Input *string `json:"input,omitempty"`
}

// TemperatureOffsetParams defines model for TemperatureOffsetParams.
type TemperatureOffsetParams struct {
	// Offset Temperature offset value added to the measured temperature.
	Offset *float32 `json:"Offset,omitempty"`
}

// Template defines model for Template.
type Template struct {
	Image     *string     `json:"image,omitempty"`
	Label     *string     `json:"label,omitempty"`
	Name      *string     `json:"name,omitempty"`
	Templates *[]Template `json:"templates,omitempty"`
	Text      *string     `json:"text,omitempty"`
	Type      *string     `json:"type,omitempty"`
	Uuid      *string     `json:"uuid,omitempty"`
	XSize     *int        `json:"x_size,omitempty"`
	YSize     *int        `json:"y_size,omitempty"`
}

// TransferRequest defines model for TransferRequest.
type TransferRequest struct {
	Devices *string `json:"Devices,omitempty"`
}

// UpdateDeviceParameters defines model for UpdateDeviceParameters.
type UpdateDeviceParameters struct {
	Name *string `json:"Name,omitempty"`
}

// UpdateProfileParam defines model for UpdateProfileParam.
type UpdateProfileParam struct {
	Country      *string `json:"Country,omitempty"`
	DistanceUnit *string `json:"DistanceUnit,omitempty"`
	Nickname     *string `json:"Nickname,omitempty"`
	TempUnit     *string `json:"TempUnit,omitempty"`
}

// UpdateSignalParameters defines model for UpdateSignalParameters.
type UpdateSignalParameters struct {
	// Image Basename of the image file included in the app. Ex: 'ico_io'.
	Image *string `json:"Image,omitempty"`

	// Name Signal name.
	Name *string `json:"Name,omitempty"`
}

// UserAndRole defines model for UserAndRole.
type UserAndRole struct {
	Role *string `json:"role,omitempty"`
	User *struct {
		Id       *string `json:"id,omitempty"`
		Nickname *string `json:"nickname,omitempty"`
	} `json:"user,omitempty"`
}

// UserAndRoles defines model for UserAndRoles.
type UserAndRoles = []UserAndRole

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Country              *string `json:"country,omitempty"`
	DistanceUnit         *string `json:"distance_unit,omitempty"`
	Id                   *string `json:"id,omitempty"`
	Nickname             *string `json:"nickname,omitempty"`
	TempUnit             *string `json:"temp_unit,omitempty"`
	UpdatedPrivacyPolicy *struct {
		Body  *string `json:"body,omitempty"`
		Links *map[string]struct {
			Link *string `json:"link,omitempty"`
			Text *string `json:"text,omitempty"`
		} `json:"links,omitempty"`
		Title *string `json:"title,omitempty"`
	} `json:"updated_privacy_policy,omitempty"`
}

// Post1ApplianceOrdersFormdataRequestBody defines body for Post1ApplianceOrders for application/x-www-form-urlencoded ContentType.
type Post1ApplianceOrdersFormdataRequestBody = ReorderAppliancesParams

// Post1AppliancesFormdataRequestBody defines body for Post1Appliances for application/x-www-form-urlencoded ContentType.
type Post1AppliancesFormdataRequestBody = CreateApplianceRequest

// Post1AppliancesApplianceidFormdataRequestBody defines body for Post1AppliancesApplianceid for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidFormdataRequestBody = ApplianceParams

// Post1AppliancesApplianceidAirconSettingsFormdataRequestBody defines body for Post1AppliancesApplianceidAirconSettings for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidAirconSettingsFormdataRequestBody = AirConParams

// Post1AppliancesApplianceidDeleteFormdataRequestBody defines body for Post1AppliancesApplianceidDelete for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidDeleteFormdataRequestBody = EmptyObject

// Post1AppliancesApplianceidLightFormdataRequestBody defines body for Post1AppliancesApplianceidLight for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidLightFormdataRequestBody = LightParams

// Post1AppliancesApplianceidLightProjectorFormdataRequestBody defines body for Post1AppliancesApplianceidLightProjector for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidLightProjectorFormdataRequestBody = LightProjectorParams

// Post1AppliancesApplianceidSignalOrdersFormdataRequestBody defines body for Post1AppliancesApplianceidSignalOrders for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidSignalOrdersFormdataRequestBody = ReorderSignalsParams

// Post1AppliancesApplianceidSignalsFormdataRequestBody defines body for Post1AppliancesApplianceidSignals for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidSignalsFormdataRequestBody = CreateSignalParameters

// Post1AppliancesApplianceidTvFormdataRequestBody defines body for Post1AppliancesApplianceidTv for application/x-www-form-urlencoded ContentType.
type Post1AppliancesApplianceidTvFormdataRequestBody = TVParams

// Post1DetectapplianceFormdataRequestBody defines body for Post1Detectappliance for application/x-www-form-urlencoded ContentType.
type Post1DetectapplianceFormdataRequestBody = DetectApplianceRequest

// Post1DevicesDeviceidFormdataRequestBody defines body for Post1DevicesDeviceid for application/x-www-form-urlencoded ContentType.
type Post1DevicesDeviceidFormdataRequestBody = UpdateDeviceParameters

// Post1DevicesDeviceidDeleteFormdataRequestBody defines body for Post1DevicesDeviceidDelete for application/x-www-form-urlencoded ContentType.
type Post1DevicesDeviceidDeleteFormdataRequestBody = EmptyObject

// Post1DevicesDeviceidHumidityOffsetFormdataRequestBody defines body for Post1DevicesDeviceidHumidityOffset for application/x-www-form-urlencoded ContentType.
type Post1DevicesDeviceidHumidityOffsetFormdataRequestBody = HumidityOffsetParams

// Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody defines body for Post1DevicesDeviceidTemperatureOffset for application/x-www-form-urlencoded ContentType.
type Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody = TemperatureOffsetParams

// Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody defines body for Post1EchonetliteAppliancesApplianceidRefresh for application/x-www-form-urlencoded ContentType.
type Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody = RefreshELPropertyRequest

// Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody defines body for Post1EchonetliteAppliancesApplianceidSet for application/x-www-form-urlencoded ContentType.
type Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody = SetELPropertyRequest

// Post1HomesFormdataRequestBody defines body for Post1Homes for application/x-www-form-urlencoded ContentType.
type Post1HomesFormdataRequestBody = HomeParams

// Post1HomesHomeidFormdataRequestBody defines body for Post1HomesHomeid for application/x-www-form-urlencoded ContentType.
type Post1HomesHomeidFormdataRequestBody = HomeParams

// Post1HomesHomeidKickFormdataRequestBody defines body for Post1HomesHomeidKick for application/x-www-form-urlencoded ContentType.
type Post1HomesHomeidKickFormdataRequestBody = HomeUserParams

// Post1HomesHomeidOwnerFormdataRequestBody defines body for Post1HomesHomeidOwner for application/x-www-form-urlencoded ContentType.
type Post1HomesHomeidOwnerFormdataRequestBody = HomeUserParams

// Post1HomesHomeidTransferTohomeidFormdataRequestBody defines body for Post1HomesHomeidTransferTohomeid for application/x-www-form-urlencoded ContentType.
type Post1HomesHomeidTransferTohomeidFormdataRequestBody = TransferRequest

// Post1SignalsSignalidFormdataRequestBody defines body for Post1SignalsSignalid for application/x-www-form-urlencoded ContentType.
type Post1SignalsSignalidFormdataRequestBody = UpdateSignalParameters

// Post1SignalsSignalidDeleteFormdataRequestBody defines body for Post1SignalsSignalidDelete for application/x-www-form-urlencoded ContentType.
type Post1SignalsSignalidDeleteFormdataRequestBody = EmptyObject

// Post1SignalsSignalidSendFormdataRequestBody defines body for Post1SignalsSignalidSend for application/x-www-form-urlencoded ContentType.
type Post1SignalsSignalidSendFormdataRequestBody = EmptyObject

// Post1UsersMeFormdataRequestBody defines body for Post1UsersMe for application/x-www-form-urlencoded ContentType.
type Post1UsersMeFormdataRequestBody = UpdateProfileParam

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Post1ApplianceOrdersWithBody request with any body
	Post1ApplianceOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1ApplianceOrdersWithFormdataBody(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1Appliances request
	Get1Appliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesWithBody request with any body
	Post1AppliancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesWithFormdataBody(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidWithBody request with any body
	Post1AppliancesApplianceidWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidAirconSettingsWithBody request with any body
	Post1AppliancesApplianceidAirconSettingsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidAirconSettingsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidDeleteWithBody request with any body
	Post1AppliancesApplianceidDeleteWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidDeleteWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidLightWithBody request with any body
	Post1AppliancesApplianceidLightWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidLightWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidLightProjectorWithBody request with any body
	Post1AppliancesApplianceidLightProjectorWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidLightProjectorWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidSesameBotClick request
	Post1AppliancesApplianceidSesameBotClick(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidSignalOrdersWithBody request with any body
	Post1AppliancesApplianceidSignalOrdersWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidSignalOrdersWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1AppliancesApplianceidSignals request
	Get1AppliancesApplianceidSignals(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidSignalsWithBody request with any body
	Post1AppliancesApplianceidSignalsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidSignalsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidTvWithBody request with any body
	Post1AppliancesApplianceidTvWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidTvWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1BleAppliancesApplianceidPrivateMacros request
	Get1BleAppliancesApplianceidPrivateMacros(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1BlePrivateMacrosPrivatemacroidExec request
	Post1BlePrivateMacrosPrivatemacroidExec(ctx context.Context, privatemacroid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DetectapplianceWithBody request with any body
	Post1DetectapplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DetectapplianceWithFormdataBody(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1Devices request
	Get1Devices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidWithBody request with any body
	Post1DevicesDeviceidWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1DevicesDeviceidAppliances request
	Get1DevicesDeviceidAppliances(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidDeleteWithBody request with any body
	Post1DevicesDeviceidDeleteWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidDeleteWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidHumidityOffsetWithBody request with any body
	Post1DevicesDeviceidHumidityOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidHumidityOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidTemperatureOffsetWithBody request with any body
	Post1DevicesDeviceidTemperatureOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidTemperatureOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1EchonetliteAppliances request
	Get1EchonetliteAppliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1EchonetliteAppliancesApplianceidRefreshWithBody request with any body
	Post1EchonetliteAppliancesApplianceidRefreshWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1EchonetliteAppliancesApplianceidSetWithBody request with any body
	Post1EchonetliteAppliancesApplianceidSetWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1EchonetliteAppliancesApplianceidSetWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1Homes request
	Get1Homes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesWithBody request with any body
	Post1HomesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesWithFormdataBody(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidWithBody request with any body
	Post1HomesHomeidWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidDelete request
	Post1HomesHomeidDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1HomesHomeidDevices request
	Get1HomesHomeidDevices(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidInvites request
	Post1HomesHomeidInvites(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidKickWithBody request with any body
	Post1HomesHomeidKickWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidKickWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidLocation request
	Post1HomesHomeidLocation(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidLocationDelete request
	Post1HomesHomeidLocationDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidLocationStateUpdate request
	Post1HomesHomeidLocationStateUpdate(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidOwnerWithBody request with any body
	Post1HomesHomeidOwnerWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidOwnerWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidPart request
	Post1HomesHomeidPart(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidTransferTohomeidWithBody request with any body
	Post1HomesHomeidTransferTohomeidWithBody(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidTransferTohomeidWithFormdataBody(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1HomesHomeidUsers request
	Get1HomesHomeidUsers(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1InvitesInvitetoken request
	Get1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1InvitesInvitetoken request
	Post1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1SignalsSignalidWithBody request with any body
	Post1SignalsSignalidWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1SignalsSignalidWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1SignalsSignalidDeleteWithBody request with any body
	Post1SignalsSignalidDeleteWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1SignalsSignalidDeleteWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1SignalsSignalidSendWithBody request with any body
	Post1SignalsSignalidSendWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1SignalsSignalidSendWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1UsersMe request
	Get1UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1UsersMeWithBody request with any body
	Post1UsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1UsersMeWithFormdataBody(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Post1ApplianceOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1ApplianceOrdersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1ApplianceOrdersWithFormdataBody(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1ApplianceOrdersRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1Appliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1AppliancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesWithFormdataBody(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidAirconSettingsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidAirconSettingsRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidAirconSettingsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidAirconSettingsRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidDeleteWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidDeleteRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidDeleteWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidDeleteRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightProjectorWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightProjectorRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightProjectorWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightProjectorRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSesameBotClick(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSesameBotClickRequest(c.Server, applianceid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalOrdersWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalOrdersRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalOrdersWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalOrdersRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1AppliancesApplianceidSignals(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1AppliancesApplianceidSignalsRequest(c.Server, applianceid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalsRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalsRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidTvWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidTvRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidTvWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidTvRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1BleAppliancesApplianceidPrivateMacros(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1BleAppliancesApplianceidPrivateMacrosRequest(c.Server, applianceid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1BlePrivateMacrosPrivatemacroidExec(ctx context.Context, privatemacroid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1BlePrivateMacrosPrivatemacroidExecRequest(c.Server, privatemacroid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DetectapplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DetectapplianceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DetectapplianceWithFormdataBody(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DetectapplianceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1Devices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1DevicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1DevicesDeviceidAppliances(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1DevicesDeviceidAppliancesRequest(c.Server, deviceid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidDeleteWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidDeleteRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidDeleteWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidDeleteRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidHumidityOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidHumidityOffsetRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidHumidityOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidHumidityOffsetRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidTemperatureOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidTemperatureOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidTemperatureOffsetRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1EchonetliteAppliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1EchonetliteAppliancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidRefreshWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidSetWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidSetWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidSetRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1Homes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1HomesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesWithFormdataBody(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidRequestWithBody(c.Server, homeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidRequestWithFormdataBody(c.Server, homeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidDeleteRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1HomesHomeidDevices(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1HomesHomeidDevicesRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidInvites(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidInvitesRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidKickWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidKickRequestWithBody(c.Server, homeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidKickWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidKickRequestWithFormdataBody(c.Server, homeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidLocation(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidLocationRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidLocationDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidLocationDeleteRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidLocationStateUpdate(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidLocationStateUpdateRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidOwnerWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidOwnerRequestWithBody(c.Server, homeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidOwnerWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidOwnerRequestWithFormdataBody(c.Server, homeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidPart(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidPartRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidTransferTohomeidWithBody(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidTransferTohomeidRequestWithBody(c.Server, homeid, tohomeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidTransferTohomeidWithFormdataBody(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidTransferTohomeidRequestWithFormdataBody(c.Server, homeid, tohomeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1HomesHomeidUsers(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1HomesHomeidUsersRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1InvitesInvitetokenRequest(c.Server, invitetoken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1InvitesInvitetokenRequest(c.Server, invitetoken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidRequestWithBody(c.Server, signalid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidRequestWithFormdataBody(c.Server, signalid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidDeleteWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidDeleteRequestWithBody(c.Server, signalid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidDeleteWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidDeleteRequestWithFormdataBody(c.Server, signalid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidSendWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidSendRequestWithBody(c.Server, signalid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidSendWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidSendRequestWithFormdataBody(c.Server, signalid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1UsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1UsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1UsersMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1UsersMeWithFormdataBody(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1UsersMeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPost1ApplianceOrdersRequestWithFormdataBody calls the generic Post1ApplianceOrders builder with application/x-www-form-urlencoded body
func NewPost1ApplianceOrdersRequestWithFormdataBody(server string, body Post1ApplianceOrdersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1ApplianceOrdersRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1ApplianceOrdersRequestWithBody generates requests for Post1ApplianceOrders with any type of body
func NewPost1ApplianceOrdersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliance_orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1AppliancesRequest generates requests for Get1Appliances
func NewGet1AppliancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1AppliancesRequestWithFormdataBody calls the generic Post1Appliances builder with application/x-www-form-urlencoded body
func NewPost1AppliancesRequestWithFormdataBody(server string, body Post1AppliancesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesRequestWithBody generates requests for Post1Appliances with any type of body
func NewPost1AppliancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidRequestWithFormdataBody calls the generic Post1AppliancesApplianceid builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidRequestWithBody generates requests for Post1AppliancesApplianceid with any type of body
func NewPost1AppliancesApplianceidRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidAirconSettingsRequestWithFormdataBody calls the generic Post1AppliancesApplianceidAirconSettings builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidAirconSettingsRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidAirconSettingsRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidAirconSettingsRequestWithBody generates requests for Post1AppliancesApplianceidAirconSettings with any type of body
func NewPost1AppliancesApplianceidAirconSettingsRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/aircon_settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidDeleteRequestWithFormdataBody calls the generic Post1AppliancesApplianceidDelete builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidDeleteRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidDeleteRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidDeleteRequestWithBody generates requests for Post1AppliancesApplianceidDelete with any type of body
func NewPost1AppliancesApplianceidDeleteRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidLightRequestWithFormdataBody calls the generic Post1AppliancesApplianceidLight builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidLightRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidLightRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidLightRequestWithBody generates requests for Post1AppliancesApplianceidLight with any type of body
func NewPost1AppliancesApplianceidLightRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/light", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidLightProjectorRequestWithFormdataBody calls the generic Post1AppliancesApplianceidLightProjector builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidLightProjectorRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidLightProjectorRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidLightProjectorRequestWithBody generates requests for Post1AppliancesApplianceidLightProjector with any type of body
func NewPost1AppliancesApplianceidLightProjectorRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/light_projector", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidSesameBotClickRequest generates requests for Post1AppliancesApplianceidSesameBotClick
func NewPost1AppliancesApplianceidSesameBotClickRequest(server string, applianceid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/sesame_bot/click", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1AppliancesApplianceidSignalOrdersRequestWithFormdataBody calls the generic Post1AppliancesApplianceidSignalOrders builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidSignalOrdersRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidSignalOrdersRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidSignalOrdersRequestWithBody generates requests for Post1AppliancesApplianceidSignalOrders with any type of body
func NewPost1AppliancesApplianceidSignalOrdersRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/signal_orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1AppliancesApplianceidSignalsRequest generates requests for Get1AppliancesApplianceidSignals
func NewGet1AppliancesApplianceidSignalsRequest(server string, applianceid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/signals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1AppliancesApplianceidSignalsRequestWithFormdataBody calls the generic Post1AppliancesApplianceidSignals builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidSignalsRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidSignalsRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidSignalsRequestWithBody generates requests for Post1AppliancesApplianceidSignals with any type of body
func NewPost1AppliancesApplianceidSignalsRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/signals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidTvRequestWithFormdataBody calls the generic Post1AppliancesApplianceidTv builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidTvRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidTvRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidTvRequestWithBody generates requests for Post1AppliancesApplianceidTv with any type of body
func NewPost1AppliancesApplianceidTvRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/tv", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1BleAppliancesApplianceidPrivateMacrosRequest generates requests for Get1BleAppliancesApplianceidPrivateMacros
func NewGet1BleAppliancesApplianceidPrivateMacrosRequest(server string, applianceid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/ble/appliances/%s/private_macros", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1BlePrivateMacrosPrivatemacroidExecRequest generates requests for Post1BlePrivateMacrosPrivatemacroidExec
func NewPost1BlePrivateMacrosPrivatemacroidExecRequest(server string, privatemacroid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "privatemacroid", runtime.ParamLocationPath, privatemacroid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/ble/private_macros/%s/exec", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1DetectapplianceRequestWithFormdataBody calls the generic Post1Detectappliance builder with application/x-www-form-urlencoded body
func NewPost1DetectapplianceRequestWithFormdataBody(server string, body Post1DetectapplianceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DetectapplianceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DetectapplianceRequestWithBody generates requests for Post1Detectappliance with any type of body
func NewPost1DetectapplianceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/detectappliance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1DevicesRequest generates requests for Get1Devices
func NewGet1DevicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1DevicesDeviceidRequestWithFormdataBody calls the generic Post1DevicesDeviceid builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidRequestWithBody generates requests for Post1DevicesDeviceid with any type of body
func NewPost1DevicesDeviceidRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1DevicesDeviceidAppliancesRequest generates requests for Get1DevicesDeviceidAppliances
func NewGet1DevicesDeviceidAppliancesRequest(server string, deviceid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/appliances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1DevicesDeviceidDeleteRequestWithFormdataBody calls the generic Post1DevicesDeviceidDelete builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidDeleteRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidDeleteRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidDeleteRequestWithBody generates requests for Post1DevicesDeviceidDelete with any type of body
func NewPost1DevicesDeviceidDeleteRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1DevicesDeviceidHumidityOffsetRequestWithFormdataBody calls the generic Post1DevicesDeviceidHumidityOffset builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidHumidityOffsetRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidHumidityOffsetRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidHumidityOffsetRequestWithBody generates requests for Post1DevicesDeviceidHumidityOffset with any type of body
func NewPost1DevicesDeviceidHumidityOffsetRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/humidity_offset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1DevicesDeviceidTemperatureOffsetRequestWithFormdataBody calls the generic Post1DevicesDeviceidTemperatureOffset builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidTemperatureOffsetRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody generates requests for Post1DevicesDeviceidTemperatureOffset with any type of body
func NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/temperature_offset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1EchonetliteAppliancesRequest generates requests for Get1EchonetliteAppliances
func NewGet1EchonetliteAppliancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/echonetlite/appliances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithFormdataBody calls the generic Post1EchonetliteAppliancesApplianceidRefresh builder with application/x-www-form-urlencoded body
func NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithFormdataBody(server string, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody generates requests for Post1EchonetliteAppliancesApplianceidRefresh with any type of body
func NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/echonetlite/appliances/%s/refresh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1EchonetliteAppliancesApplianceidSetRequestWithFormdataBody calls the generic Post1EchonetliteAppliancesApplianceidSet builder with application/x-www-form-urlencoded body
func NewPost1EchonetliteAppliancesApplianceidSetRequestWithFormdataBody(server string, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody generates requests for Post1EchonetliteAppliancesApplianceidSet with any type of body
func NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/echonetlite/appliances/%s/set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1HomesRequest generates requests for Get1Homes
func NewGet1HomesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesRequestWithFormdataBody calls the generic Post1Homes builder with application/x-www-form-urlencoded body
func NewPost1HomesRequestWithFormdataBody(server string, body Post1HomesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesRequestWithBody generates requests for Post1Homes with any type of body
func NewPost1HomesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidRequestWithFormdataBody calls the generic Post1HomesHomeid builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidRequestWithFormdataBody(server string, homeid string, body Post1HomesHomeidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidRequestWithBody(server, homeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidRequestWithBody generates requests for Post1HomesHomeid with any type of body
func NewPost1HomesHomeidRequestWithBody(server string, homeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidDeleteRequest generates requests for Post1HomesHomeidDelete
func NewPost1HomesHomeidDeleteRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet1HomesHomeidDevicesRequest generates requests for Get1HomesHomeidDevices
func NewGet1HomesHomeidDevicesRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidInvitesRequest generates requests for Post1HomesHomeidInvites
func NewPost1HomesHomeidInvitesRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/invites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidKickRequestWithFormdataBody calls the generic Post1HomesHomeidKick builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidKickRequestWithFormdataBody(server string, homeid string, body Post1HomesHomeidKickFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidKickRequestWithBody(server, homeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidKickRequestWithBody generates requests for Post1HomesHomeidKick with any type of body
func NewPost1HomesHomeidKickRequestWithBody(server string, homeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/kick", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidLocationRequest generates requests for Post1HomesHomeidLocation
func NewPost1HomesHomeidLocationRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/location", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidLocationDeleteRequest generates requests for Post1HomesHomeidLocationDelete
func NewPost1HomesHomeidLocationDeleteRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/location/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidLocationStateUpdateRequest generates requests for Post1HomesHomeidLocationStateUpdate
func NewPost1HomesHomeidLocationStateUpdateRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/location_state/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidOwnerRequestWithFormdataBody calls the generic Post1HomesHomeidOwner builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidOwnerRequestWithFormdataBody(server string, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidOwnerRequestWithBody(server, homeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidOwnerRequestWithBody generates requests for Post1HomesHomeidOwner with any type of body
func NewPost1HomesHomeidOwnerRequestWithBody(server string, homeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/owner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidPartRequest generates requests for Post1HomesHomeidPart
func NewPost1HomesHomeidPartRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/part", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidTransferTohomeidRequestWithFormdataBody calls the generic Post1HomesHomeidTransferTohomeid builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidTransferTohomeidRequestWithFormdataBody(server string, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidTransferTohomeidRequestWithBody(server, homeid, tohomeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidTransferTohomeidRequestWithBody generates requests for Post1HomesHomeidTransferTohomeid with any type of body
func NewPost1HomesHomeidTransferTohomeidRequestWithBody(server string, homeid string, tohomeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tohomeid", runtime.ParamLocationPath, tohomeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/transfer/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1HomesHomeidUsersRequest generates requests for Get1HomesHomeidUsers
func NewGet1HomesHomeidUsersRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet1InvitesInvitetokenRequest generates requests for Get1InvitesInvitetoken
func NewGet1InvitesInvitetokenRequest(server string, invitetoken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitetoken", runtime.ParamLocationPath, invitetoken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1InvitesInvitetokenRequest generates requests for Post1InvitesInvitetoken
func NewPost1InvitesInvitetokenRequest(server string, invitetoken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitetoken", runtime.ParamLocationPath, invitetoken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1SignalsSignalidRequestWithFormdataBody calls the generic Post1SignalsSignalid builder with application/x-www-form-urlencoded body
func NewPost1SignalsSignalidRequestWithFormdataBody(server string, signalid string, body Post1SignalsSignalidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1SignalsSignalidRequestWithBody(server, signalid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1SignalsSignalidRequestWithBody generates requests for Post1SignalsSignalid with any type of body
func NewPost1SignalsSignalidRequestWithBody(server string, signalid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "signalid", runtime.ParamLocationPath, signalid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/signals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1SignalsSignalidDeleteRequestWithFormdataBody calls the generic Post1SignalsSignalidDelete builder with application/x-www-form-urlencoded body
func NewPost1SignalsSignalidDeleteRequestWithFormdataBody(server string, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1SignalsSignalidDeleteRequestWithBody(server, signalid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1SignalsSignalidDeleteRequestWithBody generates requests for Post1SignalsSignalidDelete with any type of body
func NewPost1SignalsSignalidDeleteRequestWithBody(server string, signalid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "signalid", runtime.ParamLocationPath, signalid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/signals/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1SignalsSignalidSendRequestWithFormdataBody calls the generic Post1SignalsSignalidSend builder with application/x-www-form-urlencoded body
func NewPost1SignalsSignalidSendRequestWithFormdataBody(server string, signalid string, body Post1SignalsSignalidSendFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1SignalsSignalidSendRequestWithBody(server, signalid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1SignalsSignalidSendRequestWithBody generates requests for Post1SignalsSignalidSend with any type of body
func NewPost1SignalsSignalidSendRequestWithBody(server string, signalid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "signalid", runtime.ParamLocationPath, signalid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/signals/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1UsersMeRequest generates requests for Get1UsersMe
func NewGet1UsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1UsersMeRequestWithFormdataBody calls the generic Post1UsersMe builder with application/x-www-form-urlencoded body
func NewPost1UsersMeRequestWithFormdataBody(server string, body Post1UsersMeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1UsersMeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1UsersMeRequestWithBody generates requests for Post1UsersMe with any type of body
func NewPost1UsersMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Post1ApplianceOrdersWithBodyWithResponse request with any body
	Post1ApplianceOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error)

	Post1ApplianceOrdersWithFormdataBodyWithResponse(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error)

	// Get1AppliancesWithResponse request
	Get1AppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1AppliancesResponse, error)

	// Post1AppliancesWithBodyWithResponse request with any body
	Post1AppliancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error)

	Post1AppliancesWithFormdataBodyWithResponse(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error)

	// Post1AppliancesApplianceidWithBodyWithResponse request with any body
	Post1AppliancesApplianceidWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error)

	Post1AppliancesApplianceidWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error)

	// Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse request with any body
	Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error)

	Post1AppliancesApplianceidAirconSettingsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error)

	// Post1AppliancesApplianceidDeleteWithBodyWithResponse request with any body
	Post1AppliancesApplianceidDeleteWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error)

	Post1AppliancesApplianceidDeleteWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error)

	// Post1AppliancesApplianceidLightWithBodyWithResponse request with any body
	Post1AppliancesApplianceidLightWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error)

	Post1AppliancesApplianceidLightWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error)

	// Post1AppliancesApplianceidLightProjectorWithBodyWithResponse request with any body
	Post1AppliancesApplianceidLightProjectorWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error)

	Post1AppliancesApplianceidLightProjectorWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error)

	// Post1AppliancesApplianceidSesameBotClickWithResponse request
	Post1AppliancesApplianceidSesameBotClickWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSesameBotClickResponse, error)

	// Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse request with any body
	Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error)

	Post1AppliancesApplianceidSignalOrdersWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error)

	// Get1AppliancesApplianceidSignalsWithResponse request
	Get1AppliancesApplianceidSignalsWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Get1AppliancesApplianceidSignalsResponse, error)

	// Post1AppliancesApplianceidSignalsWithBodyWithResponse request with any body
	Post1AppliancesApplianceidSignalsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error)

	Post1AppliancesApplianceidSignalsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error)

	// Post1AppliancesApplianceidTvWithBodyWithResponse request with any body
	Post1AppliancesApplianceidTvWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error)

	Post1AppliancesApplianceidTvWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error)

	// Get1BleAppliancesApplianceidPrivateMacrosWithResponse request
	Get1BleAppliancesApplianceidPrivateMacrosWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Get1BleAppliancesApplianceidPrivateMacrosResponse, error)

	// Post1BlePrivateMacrosPrivatemacroidExecWithResponse request
	Post1BlePrivateMacrosPrivatemacroidExecWithResponse(ctx context.Context, privatemacroid string, reqEditors ...RequestEditorFn) (*Post1BlePrivateMacrosPrivatemacroidExecResponse, error)

	// Post1DetectapplianceWithBodyWithResponse request with any body
	Post1DetectapplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error)

	Post1DetectapplianceWithFormdataBodyWithResponse(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error)

	// Get1DevicesWithResponse request
	Get1DevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1DevicesResponse, error)

	// Post1DevicesDeviceidWithBodyWithResponse request with any body
	Post1DevicesDeviceidWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error)

	Post1DevicesDeviceidWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error)

	// Get1DevicesDeviceidAppliancesWithResponse request
	Get1DevicesDeviceidAppliancesWithResponse(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*Get1DevicesDeviceidAppliancesResponse, error)

	// Post1DevicesDeviceidDeleteWithBodyWithResponse request with any body
	Post1DevicesDeviceidDeleteWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error)

	Post1DevicesDeviceidDeleteWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error)

	// Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse request with any body
	Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error)

	Post1DevicesDeviceidHumidityOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error)

	// Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse request with any body
	Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error)

	Post1DevicesDeviceidTemperatureOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error)

	// Get1EchonetliteAppliancesWithResponse request
	Get1EchonetliteAppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1EchonetliteAppliancesResponse, error)

	// Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse request with any body
	Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error)

	Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error)

	// Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse request with any body
	Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error)

	Post1EchonetliteAppliancesApplianceidSetWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error)

	// Get1HomesWithResponse request
	Get1HomesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1HomesResponse, error)

	// Post1HomesWithBodyWithResponse request with any body
	Post1HomesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error)

	Post1HomesWithFormdataBodyWithResponse(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error)

	// Post1HomesHomeidWithBodyWithResponse request with any body
	Post1HomesHomeidWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error)

	Post1HomesHomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error)

	// Post1HomesHomeidDeleteWithResponse request
	Post1HomesHomeidDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidDeleteResponse, error)

	// Get1HomesHomeidDevicesWithResponse request
	Get1HomesHomeidDevicesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidDevicesResponse, error)

	// Post1HomesHomeidInvitesWithResponse request
	Post1HomesHomeidInvitesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidInvitesResponse, error)

	// Post1HomesHomeidKickWithBodyWithResponse request with any body
	Post1HomesHomeidKickWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error)

	Post1HomesHomeidKickWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error)

	// Post1HomesHomeidLocationWithResponse request
	Post1HomesHomeidLocationWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationResponse, error)

	// Post1HomesHomeidLocationDeleteWithResponse request
	Post1HomesHomeidLocationDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationDeleteResponse, error)

	// Post1HomesHomeidLocationStateUpdateWithResponse request
	Post1HomesHomeidLocationStateUpdateWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationStateUpdateResponse, error)

	// Post1HomesHomeidOwnerWithBodyWithResponse request with any body
	Post1HomesHomeidOwnerWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error)

	Post1HomesHomeidOwnerWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error)

	// Post1HomesHomeidPartWithResponse request
	Post1HomesHomeidPartWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidPartResponse, error)

	// Post1HomesHomeidTransferTohomeidWithBodyWithResponse request with any body
	Post1HomesHomeidTransferTohomeidWithBodyWithResponse(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error)

	Post1HomesHomeidTransferTohomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error)

	// Get1HomesHomeidUsersWithResponse request
	Get1HomesHomeidUsersWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidUsersResponse, error)

	// Get1InvitesInvitetokenWithResponse request
	Get1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Get1InvitesInvitetokenResponse, error)

	// Post1InvitesInvitetokenWithResponse request
	Post1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Post1InvitesInvitetokenResponse, error)

	// Post1SignalsSignalidWithBodyWithResponse request with any body
	Post1SignalsSignalidWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error)

	Post1SignalsSignalidWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error)

	// Post1SignalsSignalidDeleteWithBodyWithResponse request with any body
	Post1SignalsSignalidDeleteWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error)

	Post1SignalsSignalidDeleteWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error)

	// Post1SignalsSignalidSendWithBodyWithResponse request with any body
	Post1SignalsSignalidSendWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error)

	Post1SignalsSignalidSendWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error)

	// Get1UsersMeWithResponse request
	Get1UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1UsersMeResponse, error)

	// Post1UsersMeWithBodyWithResponse request with any body
	Post1UsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error)

	Post1UsersMeWithFormdataBodyWithResponse(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error)
}

type Post1ApplianceOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1ApplianceOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1ApplianceOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1AppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponses
}

// Status returns HTTPResponse.Status
func (r Get1AppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1AppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponse
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponse
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidAirconSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AirconSettingsResponse
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidAirconSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidAirconSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidLightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LightState
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidLightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidLightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidLightProjectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidLightProjectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidLightProjectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidSesameBotClickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidSesameBotClickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidSesameBotClickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidSignalOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidSignalOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidSignalOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1AppliancesApplianceidSignalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signals
}

// Status returns HTTPResponse.Status
func (r Get1AppliancesApplianceidSignalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1AppliancesApplianceidSignalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidSignalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signal
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidSignalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidSignalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidTvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TVState
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidTvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidTvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1BleAppliancesApplianceidPrivateMacrosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BLEPrivateMacroResponses
}

// Status returns HTTPResponse.Status
func (r Get1BleAppliancesApplianceidPrivateMacrosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1BleAppliancesApplianceidPrivateMacrosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1BlePrivateMacrosPrivatemacroidExecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1BlePrivateMacrosPrivatemacroidExecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1BlePrivateMacrosPrivatemacroidExecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DetectapplianceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceModelAndParams
}

// Status returns HTTPResponse.Status
func (r Post1DetectapplianceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DetectapplianceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1DevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponses
}

// Status returns HTTPResponse.Status
func (r Get1DevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1DevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1DevicesDeviceidAppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponses
}

// Status returns HTTPResponse.Status
func (r Get1DevicesDeviceidAppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1DevicesDeviceidAppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidHumidityOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidHumidityOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidHumidityOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidTemperatureOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidTemperatureOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidTemperatureOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1EchonetliteAppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EchonetLiteApplianceResponse
}

// Status returns HTTPResponse.Status
func (r Get1EchonetliteAppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1EchonetliteAppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1EchonetliteAppliancesApplianceidRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1EchonetliteAppliancesApplianceidRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1EchonetliteAppliancesApplianceidRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1EchonetliteAppliancesApplianceidSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1EchonetliteAppliancesApplianceidSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1EchonetliteAppliancesApplianceidSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1HomesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponses
}

// Status returns HTTPResponse.Status
func (r Get1HomesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1HomesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1HomesHomeidDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponses
}

// Status returns HTTPResponse.Status
func (r Get1HomesHomeidDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1HomesHomeidDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidInvitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeInvite
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidInvitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidInvitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidKickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidKickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidKickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidLocationDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidLocationDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidLocationDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidLocationStateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidLocationStateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidLocationStateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidPartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidPartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidPartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidTransferTohomeidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidTransferTohomeidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidTransferTohomeidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1HomesHomeidUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAndRoles
}

// Status returns HTTPResponse.Status
func (r Get1HomesHomeidUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1HomesHomeidUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1InvitesInvitetokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeInvite
}

// Status returns HTTPResponse.Status
func (r Get1InvitesInvitetokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1InvitesInvitetokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1InvitesInvitetokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1InvitesInvitetokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1InvitesInvitetokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1SignalsSignalidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signal
}

// Status returns HTTPResponse.Status
func (r Post1SignalsSignalidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1SignalsSignalidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1SignalsSignalidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1SignalsSignalidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1SignalsSignalidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1SignalsSignalidSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1SignalsSignalidSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1SignalsSignalidSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1UsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
}

// Status returns HTTPResponse.Status
func (r Get1UsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1UsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1UsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
}

// Status returns HTTPResponse.Status
func (r Post1UsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1UsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Post1ApplianceOrdersWithBodyWithResponse request with arbitrary body returning *Post1ApplianceOrdersResponse
func (c *ClientWithResponses) Post1ApplianceOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error) {
	rsp, err := c.Post1ApplianceOrdersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1ApplianceOrdersResponse(rsp)
}

func (c *ClientWithResponses) Post1ApplianceOrdersWithFormdataBodyWithResponse(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error) {
	rsp, err := c.Post1ApplianceOrdersWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1ApplianceOrdersResponse(rsp)
}

// Get1AppliancesWithResponse request returning *Get1AppliancesResponse
func (c *ClientWithResponses) Get1AppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1AppliancesResponse, error) {
	rsp, err := c.Get1Appliances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1AppliancesResponse(rsp)
}

// Post1AppliancesWithBodyWithResponse request with arbitrary body returning *Post1AppliancesResponse
func (c *ClientWithResponses) Post1AppliancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error) {
	rsp, err := c.Post1AppliancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesWithFormdataBodyWithResponse(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error) {
	rsp, err := c.Post1AppliancesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesResponse(rsp)
}

// Post1AppliancesApplianceidWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidResponse(rsp)
}

// Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidAirconSettingsResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidAirconSettingsWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidAirconSettingsResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidAirconSettingsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidAirconSettingsWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidAirconSettingsResponse(rsp)
}

// Post1AppliancesApplianceidDeleteWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidDeleteResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidDeleteWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidDeleteWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidDeleteResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidDeleteWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidDeleteWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidDeleteResponse(rsp)
}

// Post1AppliancesApplianceidLightWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidLightResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidLightWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidLightWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightResponse(rsp)
}

// Post1AppliancesApplianceidLightProjectorWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidLightProjectorResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidLightProjectorWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightProjectorWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightProjectorResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidLightProjectorWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightProjectorWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightProjectorResponse(rsp)
}

// Post1AppliancesApplianceidSesameBotClickWithResponse request returning *Post1AppliancesApplianceidSesameBotClickResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidSesameBotClickWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSesameBotClickResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSesameBotClick(ctx, applianceid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSesameBotClickResponse(rsp)
}

// Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidSignalOrdersResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalOrdersWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalOrdersResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidSignalOrdersWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalOrdersWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalOrdersResponse(rsp)
}

// Get1AppliancesApplianceidSignalsWithResponse request returning *Get1AppliancesApplianceidSignalsResponse
func (c *ClientWithResponses) Get1AppliancesApplianceidSignalsWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Get1AppliancesApplianceidSignalsResponse, error) {
	rsp, err := c.Get1AppliancesApplianceidSignals(ctx, applianceid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1AppliancesApplianceidSignalsResponse(rsp)
}

// Post1AppliancesApplianceidSignalsWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidSignalsResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidSignalsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalsWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalsResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidSignalsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalsWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalsResponse(rsp)
}

// Post1AppliancesApplianceidTvWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidTvResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidTvWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidTvWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidTvResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidTvWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidTvWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidTvResponse(rsp)
}

// Get1BleAppliancesApplianceidPrivateMacrosWithResponse request returning *Get1BleAppliancesApplianceidPrivateMacrosResponse
func (c *ClientWithResponses) Get1BleAppliancesApplianceidPrivateMacrosWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Get1BleAppliancesApplianceidPrivateMacrosResponse, error) {
	rsp, err := c.Get1BleAppliancesApplianceidPrivateMacros(ctx, applianceid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1BleAppliancesApplianceidPrivateMacrosResponse(rsp)
}

// Post1BlePrivateMacrosPrivatemacroidExecWithResponse request returning *Post1BlePrivateMacrosPrivatemacroidExecResponse
func (c *ClientWithResponses) Post1BlePrivateMacrosPrivatemacroidExecWithResponse(ctx context.Context, privatemacroid string, reqEditors ...RequestEditorFn) (*Post1BlePrivateMacrosPrivatemacroidExecResponse, error) {
	rsp, err := c.Post1BlePrivateMacrosPrivatemacroidExec(ctx, privatemacroid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1BlePrivateMacrosPrivatemacroidExecResponse(rsp)
}

// Post1DetectapplianceWithBodyWithResponse request with arbitrary body returning *Post1DetectapplianceResponse
func (c *ClientWithResponses) Post1DetectapplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error) {
	rsp, err := c.Post1DetectapplianceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DetectapplianceResponse(rsp)
}

func (c *ClientWithResponses) Post1DetectapplianceWithFormdataBodyWithResponse(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error) {
	rsp, err := c.Post1DetectapplianceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DetectapplianceResponse(rsp)
}

// Get1DevicesWithResponse request returning *Get1DevicesResponse
func (c *ClientWithResponses) Get1DevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1DevicesResponse, error) {
	rsp, err := c.Get1Devices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1DevicesResponse(rsp)
}

// Post1DevicesDeviceidWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidResponse
func (c *ClientWithResponses) Post1DevicesDeviceidWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error) {
	rsp, err := c.Post1DevicesDeviceidWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error) {
	rsp, err := c.Post1DevicesDeviceidWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidResponse(rsp)
}

// Get1DevicesDeviceidAppliancesWithResponse request returning *Get1DevicesDeviceidAppliancesResponse
func (c *ClientWithResponses) Get1DevicesDeviceidAppliancesWithResponse(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*Get1DevicesDeviceidAppliancesResponse, error) {
	rsp, err := c.Get1DevicesDeviceidAppliances(ctx, deviceid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1DevicesDeviceidAppliancesResponse(rsp)
}

// Post1DevicesDeviceidDeleteWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidDeleteResponse
func (c *ClientWithResponses) Post1DevicesDeviceidDeleteWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error) {
	rsp, err := c.Post1DevicesDeviceidDeleteWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidDeleteResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidDeleteWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error) {
	rsp, err := c.Post1DevicesDeviceidDeleteWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidDeleteResponse(rsp)
}

// Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidHumidityOffsetResponse
func (c *ClientWithResponses) Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidHumidityOffsetWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidHumidityOffsetResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidHumidityOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidHumidityOffsetWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidHumidityOffsetResponse(rsp)
}

// Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidTemperatureOffsetResponse
func (c *ClientWithResponses) Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidTemperatureOffsetWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidTemperatureOffsetResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidTemperatureOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidTemperatureOffsetWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidTemperatureOffsetResponse(rsp)
}

// Get1EchonetliteAppliancesWithResponse request returning *Get1EchonetliteAppliancesResponse
func (c *ClientWithResponses) Get1EchonetliteAppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1EchonetliteAppliancesResponse, error) {
	rsp, err := c.Get1EchonetliteAppliances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1EchonetliteAppliancesResponse(rsp)
}

// Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse request with arbitrary body returning *Post1EchonetliteAppliancesApplianceidRefreshResponse
func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidRefreshWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidRefreshResponse(rsp)
}

func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidRefreshResponse(rsp)
}

// Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse request with arbitrary body returning *Post1EchonetliteAppliancesApplianceidSetResponse
func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidSetWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidSetResponse(rsp)
}

func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidSetWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidSetWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidSetResponse(rsp)
}

// Get1HomesWithResponse request returning *Get1HomesResponse
func (c *ClientWithResponses) Get1HomesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1HomesResponse, error) {
	rsp, err := c.Get1Homes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1HomesResponse(rsp)
}

// Post1HomesWithBodyWithResponse request with arbitrary body returning *Post1HomesResponse
func (c *ClientWithResponses) Post1HomesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error) {
	rsp, err := c.Post1HomesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesWithFormdataBodyWithResponse(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error) {
	rsp, err := c.Post1HomesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesResponse(rsp)
}

// Post1HomesHomeidWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidResponse
func (c *ClientWithResponses) Post1HomesHomeidWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidWithBody(ctx, homeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidWithFormdataBody(ctx, homeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidResponse(rsp)
}

// Post1HomesHomeidDeleteWithResponse request returning *Post1HomesHomeidDeleteResponse
func (c *ClientWithResponses) Post1HomesHomeidDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidDeleteResponse, error) {
	rsp, err := c.Post1HomesHomeidDelete(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidDeleteResponse(rsp)
}

// Get1HomesHomeidDevicesWithResponse request returning *Get1HomesHomeidDevicesResponse
func (c *ClientWithResponses) Get1HomesHomeidDevicesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidDevicesResponse, error) {
	rsp, err := c.Get1HomesHomeidDevices(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1HomesHomeidDevicesResponse(rsp)
}

// Post1HomesHomeidInvitesWithResponse request returning *Post1HomesHomeidInvitesResponse
func (c *ClientWithResponses) Post1HomesHomeidInvitesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidInvitesResponse, error) {
	rsp, err := c.Post1HomesHomeidInvites(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidInvitesResponse(rsp)
}

// Post1HomesHomeidKickWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidKickResponse
func (c *ClientWithResponses) Post1HomesHomeidKickWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error) {
	rsp, err := c.Post1HomesHomeidKickWithBody(ctx, homeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidKickResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidKickWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error) {
	rsp, err := c.Post1HomesHomeidKickWithFormdataBody(ctx, homeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidKickResponse(rsp)
}

// Post1HomesHomeidLocationWithResponse request returning *Post1HomesHomeidLocationResponse
func (c *ClientWithResponses) Post1HomesHomeidLocationWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationResponse, error) {
	rsp, err := c.Post1HomesHomeidLocation(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidLocationResponse(rsp)
}

// Post1HomesHomeidLocationDeleteWithResponse request returning *Post1HomesHomeidLocationDeleteResponse
func (c *ClientWithResponses) Post1HomesHomeidLocationDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationDeleteResponse, error) {
	rsp, err := c.Post1HomesHomeidLocationDelete(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidLocationDeleteResponse(rsp)
}

// Post1HomesHomeidLocationStateUpdateWithResponse request returning *Post1HomesHomeidLocationStateUpdateResponse
func (c *ClientWithResponses) Post1HomesHomeidLocationStateUpdateWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationStateUpdateResponse, error) {
	rsp, err := c.Post1HomesHomeidLocationStateUpdate(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidLocationStateUpdateResponse(rsp)
}

// Post1HomesHomeidOwnerWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidOwnerResponse
func (c *ClientWithResponses) Post1HomesHomeidOwnerWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error) {
	rsp, err := c.Post1HomesHomeidOwnerWithBody(ctx, homeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidOwnerResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidOwnerWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error) {
	rsp, err := c.Post1HomesHomeidOwnerWithFormdataBody(ctx, homeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidOwnerResponse(rsp)
}

// Post1HomesHomeidPartWithResponse request returning *Post1HomesHomeidPartResponse
func (c *ClientWithResponses) Post1HomesHomeidPartWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidPartResponse, error) {
	rsp, err := c.Post1HomesHomeidPart(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidPartResponse(rsp)
}

// Post1HomesHomeidTransferTohomeidWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidTransferTohomeidResponse
func (c *ClientWithResponses) Post1HomesHomeidTransferTohomeidWithBodyWithResponse(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidTransferTohomeidWithBody(ctx, homeid, tohomeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidTransferTohomeidResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidTransferTohomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidTransferTohomeidWithFormdataBody(ctx, homeid, tohomeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidTransferTohomeidResponse(rsp)
}

// Get1HomesHomeidUsersWithResponse request returning *Get1HomesHomeidUsersResponse
func (c *ClientWithResponses) Get1HomesHomeidUsersWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidUsersResponse, error) {
	rsp, err := c.Get1HomesHomeidUsers(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1HomesHomeidUsersResponse(rsp)
}

// Get1InvitesInvitetokenWithResponse request returning *Get1InvitesInvitetokenResponse
func (c *ClientWithResponses) Get1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Get1InvitesInvitetokenResponse, error) {
	rsp, err := c.Get1InvitesInvitetoken(ctx, invitetoken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1InvitesInvitetokenResponse(rsp)
}

// Post1InvitesInvitetokenWithResponse request returning *Post1InvitesInvitetokenResponse
func (c *ClientWithResponses) Post1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Post1InvitesInvitetokenResponse, error) {
	rsp, err := c.Post1InvitesInvitetoken(ctx, invitetoken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1InvitesInvitetokenResponse(rsp)
}

// Post1SignalsSignalidWithBodyWithResponse request with arbitrary body returning *Post1SignalsSignalidResponse
func (c *ClientWithResponses) Post1SignalsSignalidWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error) {
	rsp, err := c.Post1SignalsSignalidWithBody(ctx, signalid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidResponse(rsp)
}

func (c *ClientWithResponses) Post1SignalsSignalidWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error) {
	rsp, err := c.Post1SignalsSignalidWithFormdataBody(ctx, signalid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidResponse(rsp)
}

// Post1SignalsSignalidDeleteWithBodyWithResponse request with arbitrary body returning *Post1SignalsSignalidDeleteResponse
func (c *ClientWithResponses) Post1SignalsSignalidDeleteWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error) {
	rsp, err := c.Post1SignalsSignalidDeleteWithBody(ctx, signalid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidDeleteResponse(rsp)
}

func (c *ClientWithResponses) Post1SignalsSignalidDeleteWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error) {
	rsp, err := c.Post1SignalsSignalidDeleteWithFormdataBody(ctx, signalid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidDeleteResponse(rsp)
}

// Post1SignalsSignalidSendWithBodyWithResponse request with arbitrary body returning *Post1SignalsSignalidSendResponse
func (c *ClientWithResponses) Post1SignalsSignalidSendWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error) {
	rsp, err := c.Post1SignalsSignalidSendWithBody(ctx, signalid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidSendResponse(rsp)
}

func (c *ClientWithResponses) Post1SignalsSignalidSendWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error) {
	rsp, err := c.Post1SignalsSignalidSendWithFormdataBody(ctx, signalid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidSendResponse(rsp)
}

// Get1UsersMeWithResponse request returning *Get1UsersMeResponse
func (c *ClientWithResponses) Get1UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1UsersMeResponse, error) {
	rsp, err := c.Get1UsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1UsersMeResponse(rsp)
}

// Post1UsersMeWithBodyWithResponse request with arbitrary body returning *Post1UsersMeResponse
func (c *ClientWithResponses) Post1UsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error) {
	rsp, err := c.Post1UsersMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1UsersMeResponse(rsp)
}

func (c *ClientWithResponses) Post1UsersMeWithFormdataBodyWithResponse(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error) {
	rsp, err := c.Post1UsersMeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1UsersMeResponse(rsp)
}

// ParsePost1ApplianceOrdersResponse parses an HTTP response from a Post1ApplianceOrdersWithResponse call
func ParsePost1ApplianceOrdersResponse(rsp *http.Response) (*Post1ApplianceOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1ApplianceOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1AppliancesResponse parses an HTTP response from a Get1AppliancesWithResponse call
func ParseGet1AppliancesResponse(rsp *http.Response) (*Get1AppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1AppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesResponse parses an HTTP response from a Post1AppliancesWithResponse call
func ParsePost1AppliancesResponse(rsp *http.Response) (*Post1AppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidResponse parses an HTTP response from a Post1AppliancesApplianceidWithResponse call
func ParsePost1AppliancesApplianceidResponse(rsp *http.Response) (*Post1AppliancesApplianceidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidAirconSettingsResponse parses an HTTP response from a Post1AppliancesApplianceidAirconSettingsWithResponse call
func ParsePost1AppliancesApplianceidAirconSettingsResponse(rsp *http.Response) (*Post1AppliancesApplianceidAirconSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidAirconSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AirconSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidDeleteResponse parses an HTTP response from a Post1AppliancesApplianceidDeleteWithResponse call
func ParsePost1AppliancesApplianceidDeleteResponse(rsp *http.Response) (*Post1AppliancesApplianceidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidLightResponse parses an HTTP response from a Post1AppliancesApplianceidLightWithResponse call
func ParsePost1AppliancesApplianceidLightResponse(rsp *http.Response) (*Post1AppliancesApplianceidLightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidLightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LightState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidLightProjectorResponse parses an HTTP response from a Post1AppliancesApplianceidLightProjectorWithResponse call
func ParsePost1AppliancesApplianceidLightProjectorResponse(rsp *http.Response) (*Post1AppliancesApplianceidLightProjectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidLightProjectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidSesameBotClickResponse parses an HTTP response from a Post1AppliancesApplianceidSesameBotClickWithResponse call
func ParsePost1AppliancesApplianceidSesameBotClickResponse(rsp *http.Response) (*Post1AppliancesApplianceidSesameBotClickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidSesameBotClickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidSignalOrdersResponse parses an HTTP response from a Post1AppliancesApplianceidSignalOrdersWithResponse call
func ParsePost1AppliancesApplianceidSignalOrdersResponse(rsp *http.Response) (*Post1AppliancesApplianceidSignalOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidSignalOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1AppliancesApplianceidSignalsResponse parses an HTTP response from a Get1AppliancesApplianceidSignalsWithResponse call
func ParseGet1AppliancesApplianceidSignalsResponse(rsp *http.Response) (*Get1AppliancesApplianceidSignalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1AppliancesApplianceidSignalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signals
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidSignalsResponse parses an HTTP response from a Post1AppliancesApplianceidSignalsWithResponse call
func ParsePost1AppliancesApplianceidSignalsResponse(rsp *http.Response) (*Post1AppliancesApplianceidSignalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidSignalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidTvResponse parses an HTTP response from a Post1AppliancesApplianceidTvWithResponse call
func ParsePost1AppliancesApplianceidTvResponse(rsp *http.Response) (*Post1AppliancesApplianceidTvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidTvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TVState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1BleAppliancesApplianceidPrivateMacrosResponse parses an HTTP response from a Get1BleAppliancesApplianceidPrivateMacrosWithResponse call
func ParseGet1BleAppliancesApplianceidPrivateMacrosResponse(rsp *http.Response) (*Get1BleAppliancesApplianceidPrivateMacrosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1BleAppliancesApplianceidPrivateMacrosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BLEPrivateMacroResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1BlePrivateMacrosPrivatemacroidExecResponse parses an HTTP response from a Post1BlePrivateMacrosPrivatemacroidExecWithResponse call
func ParsePost1BlePrivateMacrosPrivatemacroidExecResponse(rsp *http.Response) (*Post1BlePrivateMacrosPrivatemacroidExecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1BlePrivateMacrosPrivatemacroidExecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DetectapplianceResponse parses an HTTP response from a Post1DetectapplianceWithResponse call
func ParsePost1DetectapplianceResponse(rsp *http.Response) (*Post1DetectapplianceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DetectapplianceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceModelAndParams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1DevicesResponse parses an HTTP response from a Get1DevicesWithResponse call
func ParseGet1DevicesResponse(rsp *http.Response) (*Get1DevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1DevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidResponse parses an HTTP response from a Post1DevicesDeviceidWithResponse call
func ParsePost1DevicesDeviceidResponse(rsp *http.Response) (*Post1DevicesDeviceidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1DevicesDeviceidAppliancesResponse parses an HTTP response from a Get1DevicesDeviceidAppliancesWithResponse call
func ParseGet1DevicesDeviceidAppliancesResponse(rsp *http.Response) (*Get1DevicesDeviceidAppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1DevicesDeviceidAppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidDeleteResponse parses an HTTP response from a Post1DevicesDeviceidDeleteWithResponse call
func ParsePost1DevicesDeviceidDeleteResponse(rsp *http.Response) (*Post1DevicesDeviceidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidHumidityOffsetResponse parses an HTTP response from a Post1DevicesDeviceidHumidityOffsetWithResponse call
func ParsePost1DevicesDeviceidHumidityOffsetResponse(rsp *http.Response) (*Post1DevicesDeviceidHumidityOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidHumidityOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidTemperatureOffsetResponse parses an HTTP response from a Post1DevicesDeviceidTemperatureOffsetWithResponse call
func ParsePost1DevicesDeviceidTemperatureOffsetResponse(rsp *http.Response) (*Post1DevicesDeviceidTemperatureOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidTemperatureOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1EchonetliteAppliancesResponse parses an HTTP response from a Get1EchonetliteAppliancesWithResponse call
func ParseGet1EchonetliteAppliancesResponse(rsp *http.Response) (*Get1EchonetliteAppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1EchonetliteAppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EchonetLiteApplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1EchonetliteAppliancesApplianceidRefreshResponse parses an HTTP response from a Post1EchonetliteAppliancesApplianceidRefreshWithResponse call
func ParsePost1EchonetliteAppliancesApplianceidRefreshResponse(rsp *http.Response) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1EchonetliteAppliancesApplianceidRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParsePost1EchonetliteAppliancesApplianceidSetResponse parses an HTTP response from a Post1EchonetliteAppliancesApplianceidSetWithResponse call
func ParsePost1EchonetliteAppliancesApplianceidSetResponse(rsp *http.Response) (*Post1EchonetliteAppliancesApplianceidSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1EchonetliteAppliancesApplianceidSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGet1HomesResponse parses an HTTP response from a Get1HomesWithResponse call
func ParseGet1HomesResponse(rsp *http.Response) (*Get1HomesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1HomesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesResponse parses an HTTP response from a Post1HomesWithResponse call
func ParsePost1HomesResponse(rsp *http.Response) (*Post1HomesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidResponse parses an HTTP response from a Post1HomesHomeidWithResponse call
func ParsePost1HomesHomeidResponse(rsp *http.Response) (*Post1HomesHomeidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidDeleteResponse parses an HTTP response from a Post1HomesHomeidDeleteWithResponse call
func ParsePost1HomesHomeidDeleteResponse(rsp *http.Response) (*Post1HomesHomeidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1HomesHomeidDevicesResponse parses an HTTP response from a Get1HomesHomeidDevicesWithResponse call
func ParseGet1HomesHomeidDevicesResponse(rsp *http.Response) (*Get1HomesHomeidDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1HomesHomeidDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidInvitesResponse parses an HTTP response from a Post1HomesHomeidInvitesWithResponse call
func ParsePost1HomesHomeidInvitesResponse(rsp *http.Response) (*Post1HomesHomeidInvitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidInvitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeInvite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidKickResponse parses an HTTP response from a Post1HomesHomeidKickWithResponse call
func ParsePost1HomesHomeidKickResponse(rsp *http.Response) (*Post1HomesHomeidKickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidKickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidLocationResponse parses an HTTP response from a Post1HomesHomeidLocationWithResponse call
func ParsePost1HomesHomeidLocationResponse(rsp *http.Response) (*Post1HomesHomeidLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidLocationDeleteResponse parses an HTTP response from a Post1HomesHomeidLocationDeleteWithResponse call
func ParsePost1HomesHomeidLocationDeleteResponse(rsp *http.Response) (*Post1HomesHomeidLocationDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidLocationDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidLocationStateUpdateResponse parses an HTTP response from a Post1HomesHomeidLocationStateUpdateWithResponse call
func ParsePost1HomesHomeidLocationStateUpdateResponse(rsp *http.Response) (*Post1HomesHomeidLocationStateUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidLocationStateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidOwnerResponse parses an HTTP response from a Post1HomesHomeidOwnerWithResponse call
func ParsePost1HomesHomeidOwnerResponse(rsp *http.Response) (*Post1HomesHomeidOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidPartResponse parses an HTTP response from a Post1HomesHomeidPartWithResponse call
func ParsePost1HomesHomeidPartResponse(rsp *http.Response) (*Post1HomesHomeidPartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidPartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidTransferTohomeidResponse parses an HTTP response from a Post1HomesHomeidTransferTohomeidWithResponse call
func ParsePost1HomesHomeidTransferTohomeidResponse(rsp *http.Response) (*Post1HomesHomeidTransferTohomeidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidTransferTohomeidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1HomesHomeidUsersResponse parses an HTTP response from a Get1HomesHomeidUsersWithResponse call
func ParseGet1HomesHomeidUsersResponse(rsp *http.Response) (*Get1HomesHomeidUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1HomesHomeidUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAndRoles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1InvitesInvitetokenResponse parses an HTTP response from a Get1InvitesInvitetokenWithResponse call
func ParseGet1InvitesInvitetokenResponse(rsp *http.Response) (*Get1InvitesInvitetokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1InvitesInvitetokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeInvite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1InvitesInvitetokenResponse parses an HTTP response from a Post1InvitesInvitetokenWithResponse call
func ParsePost1InvitesInvitetokenResponse(rsp *http.Response) (*Post1InvitesInvitetokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1InvitesInvitetokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1SignalsSignalidResponse parses an HTTP response from a Post1SignalsSignalidWithResponse call
func ParsePost1SignalsSignalidResponse(rsp *http.Response) (*Post1SignalsSignalidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1SignalsSignalidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1SignalsSignalidDeleteResponse parses an HTTP response from a Post1SignalsSignalidDeleteWithResponse call
func ParsePost1SignalsSignalidDeleteResponse(rsp *http.Response) (*Post1SignalsSignalidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1SignalsSignalidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1SignalsSignalidSendResponse parses an HTTP response from a Post1SignalsSignalidSendWithResponse call
func ParsePost1SignalsSignalidSendResponse(rsp *http.Response) (*Post1SignalsSignalidSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1SignalsSignalidSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1UsersMeResponse parses an HTTP response from a Get1UsersMeWithResponse call
func ParseGet1UsersMeResponse(rsp *http.Response) (*Get1UsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1UsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1UsersMeResponse parses an HTTP response from a Post1UsersMeWithResponse call
func ParsePost1UsersMeResponse(rsp *http.Response) (*Post1UsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1UsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /1/appliance_orders)
	Post1ApplianceOrders(ctx echo.Context) error

	// (GET /1/appliances)
	Get1Appliances(ctx echo.Context) error

	// (POST /1/appliances)
	Post1Appliances(ctx echo.Context) error

	// (POST /1/appliances/{applianceid})
	Post1AppliancesApplianceid(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/aircon_settings)
	Post1AppliancesApplianceidAirconSettings(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/delete)
	Post1AppliancesApplianceidDelete(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/light)
	Post1AppliancesApplianceidLight(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/light_projector)
	Post1AppliancesApplianceidLightProjector(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/sesame_bot/click)
	Post1AppliancesApplianceidSesameBotClick(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/signal_orders)
	Post1AppliancesApplianceidSignalOrders(ctx echo.Context, applianceid string) error

	// (GET /1/appliances/{applianceid}/signals)
	Get1AppliancesApplianceidSignals(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/signals)
	Post1AppliancesApplianceidSignals(ctx echo.Context, applianceid string) error

	// (POST /1/appliances/{applianceid}/tv)
	Post1AppliancesApplianceidTv(ctx echo.Context, applianceid string) error

	// (GET /1/ble/appliances/{applianceid}/private_macros)
	Get1BleAppliancesApplianceidPrivateMacros(ctx echo.Context, applianceid string) error

	// (POST /1/ble/private_macros/{privatemacroid}/exec)
	Post1BlePrivateMacrosPrivatemacroidExec(ctx echo.Context, privatemacroid string) error

	// (POST /1/detectappliance)
	Post1Detectappliance(ctx echo.Context) error

	// (GET /1/devices)
	Get1Devices(ctx echo.Context) error

	// (POST /1/devices/{deviceid})
	Post1DevicesDeviceid(ctx echo.Context, deviceid string) error

	// (GET /1/devices/{deviceid}/appliances)
	Get1DevicesDeviceidAppliances(ctx echo.Context, deviceid string) error

	// (POST /1/devices/{deviceid}/delete)
	Post1DevicesDeviceidDelete(ctx echo.Context, deviceid string) error

	// (POST /1/devices/{deviceid}/humidity_offset)
	Post1DevicesDeviceidHumidityOffset(ctx echo.Context, deviceid string) error

	// (POST /1/devices/{deviceid}/temperature_offset)
	Post1DevicesDeviceidTemperatureOffset(ctx echo.Context, deviceid string) error

	// (GET /1/echonetlite/appliances)
	Get1EchonetliteAppliances(ctx echo.Context) error

	// (POST /1/echonetlite/appliances/{applianceid}/refresh)
	Post1EchonetliteAppliancesApplianceidRefresh(ctx echo.Context, applianceid string) error

	// (POST /1/echonetlite/appliances/{applianceid}/set)
	Post1EchonetliteAppliancesApplianceidSet(ctx echo.Context, applianceid string) error

	// (GET /1/homes)
	Get1Homes(ctx echo.Context) error

	// (POST /1/homes)
	Post1Homes(ctx echo.Context) error

	// (POST /1/homes/{homeid})
	Post1HomesHomeid(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/delete)
	Post1HomesHomeidDelete(ctx echo.Context, homeid string) error

	// (GET /1/homes/{homeid}/devices)
	Get1HomesHomeidDevices(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/invites)
	Post1HomesHomeidInvites(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/kick)
	Post1HomesHomeidKick(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/location)
	Post1HomesHomeidLocation(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/location/delete)
	Post1HomesHomeidLocationDelete(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/location_state/update)
	Post1HomesHomeidLocationStateUpdate(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/owner)
	Post1HomesHomeidOwner(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/part)
	Post1HomesHomeidPart(ctx echo.Context, homeid string) error

	// (POST /1/homes/{homeid}/transfer/{tohomeid})
	Post1HomesHomeidTransferTohomeid(ctx echo.Context, homeid string, tohomeid string) error

	// (GET /1/homes/{homeid}/users)
	Get1HomesHomeidUsers(ctx echo.Context, homeid string) error

	// (GET /1/invites/{invitetoken})
	Get1InvitesInvitetoken(ctx echo.Context, invitetoken string) error

	// (POST /1/invites/{invitetoken})
	Post1InvitesInvitetoken(ctx echo.Context, invitetoken string) error

	// (POST /1/signals/{signalid})
	Post1SignalsSignalid(ctx echo.Context, signalid string) error

	// (POST /1/signals/{signalid}/delete)
	Post1SignalsSignalidDelete(ctx echo.Context, signalid string) error

	// (POST /1/signals/{signalid}/send)
	Post1SignalsSignalidSend(ctx echo.Context, signalid string) error

	// (GET /1/users/me)
	Get1UsersMe(ctx echo.Context) error

	// (POST /1/users/me)
	Post1UsersMe(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Post1ApplianceOrders converts echo context to params.
func (w *ServerInterfaceWrapper) Post1ApplianceOrders(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1ApplianceOrders(ctx)
	return err
}

// Get1Appliances converts echo context to params.
func (w *ServerInterfaceWrapper) Get1Appliances(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"basic.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1Appliances(ctx)
	return err
}

// Post1Appliances converts echo context to params.
func (w *ServerInterfaceWrapper) Post1Appliances(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1Appliances(ctx)
	return err
}

// Post1AppliancesApplianceid converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceid(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidAirconSettings converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidAirconSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"sendir"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidAirconSettings(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidDelete converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidDelete(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidLight converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidLight(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"sendir"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidLight(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidLightProjector converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidLightProjector(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"sendir"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidLightProjector(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidSesameBotClick converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidSesameBotClick(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"sendir"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidSesameBotClick(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidSignalOrders converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidSignalOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidSignalOrders(ctx, applianceid)
	return err
}

// Get1AppliancesApplianceidSignals converts echo context to params.
func (w *ServerInterfaceWrapper) Get1AppliancesApplianceidSignals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1AppliancesApplianceidSignals(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidSignals converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidSignals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidSignals(ctx, applianceid)
	return err
}

// Post1AppliancesApplianceidTv converts echo context to params.
func (w *ServerInterfaceWrapper) Post1AppliancesApplianceidTv(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"sendir"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1AppliancesApplianceidTv(ctx, applianceid)
	return err
}

// Get1BleAppliancesApplianceidPrivateMacros converts echo context to params.
func (w *ServerInterfaceWrapper) Get1BleAppliancesApplianceidPrivateMacros(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1BleAppliancesApplianceidPrivateMacros(ctx, applianceid)
	return err
}

// Post1BlePrivateMacrosPrivatemacroidExec converts echo context to params.
func (w *ServerInterfaceWrapper) Post1BlePrivateMacrosPrivatemacroidExec(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "privatemacroid" -------------
	var privatemacroid string

	err = runtime.BindStyledParameterWithOptions("simple", "privatemacroid", ctx.Param("privatemacroid"), &privatemacroid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter privatemacroid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"sendir"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1BlePrivateMacrosPrivatemacroidExec(ctx, privatemacroid)
	return err
}

// Post1Detectappliance converts echo context to params.
func (w *ServerInterfaceWrapper) Post1Detectappliance(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"detectappliance"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1Detectappliance(ctx)
	return err
}

// Get1Devices converts echo context to params.
func (w *ServerInterfaceWrapper) Get1Devices(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"basic.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1Devices(ctx)
	return err
}

// Post1DevicesDeviceid converts echo context to params.
func (w *ServerInterfaceWrapper) Post1DevicesDeviceid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deviceid" -------------
	var deviceid string

	err = runtime.BindStyledParameterWithOptions("simple", "deviceid", ctx.Param("deviceid"), &deviceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1DevicesDeviceid(ctx, deviceid)
	return err
}

// Get1DevicesDeviceidAppliances converts echo context to params.
func (w *ServerInterfaceWrapper) Get1DevicesDeviceidAppliances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deviceid" -------------
	var deviceid string

	err = runtime.BindStyledParameterWithOptions("simple", "deviceid", ctx.Param("deviceid"), &deviceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1DevicesDeviceidAppliances(ctx, deviceid)
	return err
}

// Post1DevicesDeviceidDelete converts echo context to params.
func (w *ServerInterfaceWrapper) Post1DevicesDeviceidDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deviceid" -------------
	var deviceid string

	err = runtime.BindStyledParameterWithOptions("simple", "deviceid", ctx.Param("deviceid"), &deviceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1DevicesDeviceidDelete(ctx, deviceid)
	return err
}

// Post1DevicesDeviceidHumidityOffset converts echo context to params.
func (w *ServerInterfaceWrapper) Post1DevicesDeviceidHumidityOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deviceid" -------------
	var deviceid string

	err = runtime.BindStyledParameterWithOptions("simple", "deviceid", ctx.Param("deviceid"), &deviceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1DevicesDeviceidHumidityOffset(ctx, deviceid)
	return err
}

// Post1DevicesDeviceidTemperatureOffset converts echo context to params.
func (w *ServerInterfaceWrapper) Post1DevicesDeviceidTemperatureOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deviceid" -------------
	var deviceid string

	err = runtime.BindStyledParameterWithOptions("simple", "deviceid", ctx.Param("deviceid"), &deviceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1DevicesDeviceidTemperatureOffset(ctx, deviceid)
	return err
}

// Get1EchonetliteAppliances converts echo context to params.
func (w *ServerInterfaceWrapper) Get1EchonetliteAppliances(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"basic.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1EchonetliteAppliances(ctx)
	return err
}

// Post1EchonetliteAppliancesApplianceidRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) Post1EchonetliteAppliancesApplianceidRefresh(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"echonetlite.*.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1EchonetliteAppliancesApplianceidRefresh(ctx, applianceid)
	return err
}

// Post1EchonetliteAppliancesApplianceidSet converts echo context to params.
func (w *ServerInterfaceWrapper) Post1EchonetliteAppliancesApplianceidSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applianceid" -------------
	var applianceid string

	err = runtime.BindStyledParameterWithOptions("simple", "applianceid", ctx.Param("applianceid"), &applianceid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applianceid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"echonetlite.*.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1EchonetliteAppliancesApplianceidSet(ctx, applianceid)
	return err
}

// Get1Homes converts echo context to params.
func (w *ServerInterfaceWrapper) Get1Homes(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"home.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1Homes(ctx)
	return err
}

// Post1Homes converts echo context to params.
func (w *ServerInterfaceWrapper) Post1Homes(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1Homes(ctx)
	return err
}

// Post1HomesHomeid converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeid(ctx, homeid)
	return err
}

// Post1HomesHomeidDelete converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidDelete(ctx, homeid)
	return err
}

// Get1HomesHomeidDevices converts echo context to params.
func (w *ServerInterfaceWrapper) Get1HomesHomeidDevices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1HomesHomeidDevices(ctx, homeid)
	return err
}

// Post1HomesHomeidInvites converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidInvites(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidInvites(ctx, homeid)
	return err
}

// Post1HomesHomeidKick converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidKick(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidKick(ctx, homeid)
	return err
}

// Post1HomesHomeidLocation converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidLocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidLocation(ctx, homeid)
	return err
}

// Post1HomesHomeidLocationDelete converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidLocationDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidLocationDelete(ctx, homeid)
	return err
}

// Post1HomesHomeidLocationStateUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidLocationStateUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidLocationStateUpdate(ctx, homeid)
	return err
}

// Post1HomesHomeidOwner converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidOwner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidOwner(ctx, homeid)
	return err
}

// Post1HomesHomeidPart converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidPart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidPart(ctx, homeid)
	return err
}

// Post1HomesHomeidTransferTohomeid converts echo context to params.
func (w *ServerInterfaceWrapper) Post1HomesHomeidTransferTohomeid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	// ------------- Path parameter "tohomeid" -------------
	var tohomeid string

	err = runtime.BindStyledParameterWithOptions("simple", "tohomeid", ctx.Param("tohomeid"), &tohomeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tohomeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1HomesHomeidTransferTohomeid(ctx, homeid, tohomeid)
	return err
}

// Get1HomesHomeidUsers converts echo context to params.
func (w *ServerInterfaceWrapper) Get1HomesHomeidUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "homeid" -------------
	var homeid string

	err = runtime.BindStyledParameterWithOptions("simple", "homeid", ctx.Param("homeid"), &homeid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter homeid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1HomesHomeidUsers(ctx, homeid)
	return err
}

// Get1InvitesInvitetoken converts echo context to params.
func (w *ServerInterfaceWrapper) Get1InvitesInvitetoken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invitetoken" -------------
	var invitetoken string

	err = runtime.BindStyledParameterWithOptions("simple", "invitetoken", ctx.Param("invitetoken"), &invitetoken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitetoken: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1InvitesInvitetoken(ctx, invitetoken)
	return err
}

// Post1InvitesInvitetoken converts echo context to params.
func (w *ServerInterfaceWrapper) Post1InvitesInvitetoken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invitetoken" -------------
	var invitetoken string

	err = runtime.BindStyledParameterWithOptions("simple", "invitetoken", ctx.Param("invitetoken"), &invitetoken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitetoken: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"home.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1InvitesInvitetoken(ctx, invitetoken)
	return err
}

// Post1SignalsSignalid converts echo context to params.
func (w *ServerInterfaceWrapper) Post1SignalsSignalid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "signalid" -------------
	var signalid string

	err = runtime.BindStyledParameterWithOptions("simple", "signalid", ctx.Param("signalid"), &signalid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter signalid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1SignalsSignalid(ctx, signalid)
	return err
}

// Post1SignalsSignalidDelete converts echo context to params.
func (w *ServerInterfaceWrapper) Post1SignalsSignalidDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "signalid" -------------
	var signalid string

	err = runtime.BindStyledParameterWithOptions("simple", "signalid", ctx.Param("signalid"), &signalid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter signalid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1SignalsSignalidDelete(ctx, signalid)
	return err
}

// Post1SignalsSignalidSend converts echo context to params.
func (w *ServerInterfaceWrapper) Post1SignalsSignalidSend(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "signalid" -------------
	var signalid string

	err = runtime.BindStyledParameterWithOptions("simple", "signalid", ctx.Param("signalid"), &signalid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter signalid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"sendir"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1SignalsSignalidSend(ctx, signalid)
	return err
}

// Get1UsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) Get1UsersMe(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"basic.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get1UsersMe(ctx)
	return err
}

// Post1UsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) Post1UsersMe(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"basic.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Post1UsersMe(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/1/appliance_orders", wrapper.Post1ApplianceOrders)
	router.GET(baseURL+"/1/appliances", wrapper.Get1Appliances)
	router.POST(baseURL+"/1/appliances", wrapper.Post1Appliances)
	router.POST(baseURL+"/1/appliances/:applianceid", wrapper.Post1AppliancesApplianceid)
	router.POST(baseURL+"/1/appliances/:applianceid/aircon_settings", wrapper.Post1AppliancesApplianceidAirconSettings)
	router.POST(baseURL+"/1/appliances/:applianceid/delete", wrapper.Post1AppliancesApplianceidDelete)
	router.POST(baseURL+"/1/appliances/:applianceid/light", wrapper.Post1AppliancesApplianceidLight)
	router.POST(baseURL+"/1/appliances/:applianceid/light_projector", wrapper.Post1AppliancesApplianceidLightProjector)
	router.POST(baseURL+"/1/appliances/:applianceid/sesame_bot/click", wrapper.Post1AppliancesApplianceidSesameBotClick)
	router.POST(baseURL+"/1/appliances/:applianceid/signal_orders", wrapper.Post1AppliancesApplianceidSignalOrders)
	router.GET(baseURL+"/1/appliances/:applianceid/signals", wrapper.Get1AppliancesApplianceidSignals)
	router.POST(baseURL+"/1/appliances/:applianceid/signals", wrapper.Post1AppliancesApplianceidSignals)
	router.POST(baseURL+"/1/appliances/:applianceid/tv", wrapper.Post1AppliancesApplianceidTv)
	router.GET(baseURL+"/1/ble/appliances/:applianceid/private_macros", wrapper.Get1BleAppliancesApplianceidPrivateMacros)
	router.POST(baseURL+"/1/ble/private_macros/:privatemacroid/exec", wrapper.Post1BlePrivateMacrosPrivatemacroidExec)
	router.POST(baseURL+"/1/detectappliance", wrapper.Post1Detectappliance)
	router.GET(baseURL+"/1/devices", wrapper.Get1Devices)
	router.POST(baseURL+"/1/devices/:deviceid", wrapper.Post1DevicesDeviceid)
	router.GET(baseURL+"/1/devices/:deviceid/appliances", wrapper.Get1DevicesDeviceidAppliances)
	router.POST(baseURL+"/1/devices/:deviceid/delete", wrapper.Post1DevicesDeviceidDelete)
	router.POST(baseURL+"/1/devices/:deviceid/humidity_offset", wrapper.Post1DevicesDeviceidHumidityOffset)
	router.POST(baseURL+"/1/devices/:deviceid/temperature_offset", wrapper.Post1DevicesDeviceidTemperatureOffset)
	router.GET(baseURL+"/1/echonetlite/appliances", wrapper.Get1EchonetliteAppliances)
	router.POST(baseURL+"/1/echonetlite/appliances/:applianceid/refresh", wrapper.Post1EchonetliteAppliancesApplianceidRefresh)
	router.POST(baseURL+"/1/echonetlite/appliances/:applianceid/set", wrapper.Post1EchonetliteAppliancesApplianceidSet)
	router.GET(baseURL+"/1/homes", wrapper.Get1Homes)
	router.POST(baseURL+"/1/homes", wrapper.Post1Homes)
	router.POST(baseURL+"/1/homes/:homeid", wrapper.Post1HomesHomeid)
	router.POST(baseURL+"/1/homes/:homeid/delete", wrapper.Post1HomesHomeidDelete)
	router.GET(baseURL+"/1/homes/:homeid/devices", wrapper.Get1HomesHomeidDevices)
	router.POST(baseURL+"/1/homes/:homeid/invites", wrapper.Post1HomesHomeidInvites)
	router.POST(baseURL+"/1/homes/:homeid/kick", wrapper.Post1HomesHomeidKick)
	router.POST(baseURL+"/1/homes/:homeid/location", wrapper.Post1HomesHomeidLocation)
	router.POST(baseURL+"/1/homes/:homeid/location/delete", wrapper.Post1HomesHomeidLocationDelete)
	router.POST(baseURL+"/1/homes/:homeid/location_state/update", wrapper.Post1HomesHomeidLocationStateUpdate)
	router.POST(baseURL+"/1/homes/:homeid/owner", wrapper.Post1HomesHomeidOwner)
	router.POST(baseURL+"/1/homes/:homeid/part", wrapper.Post1HomesHomeidPart)
	router.POST(baseURL+"/1/homes/:homeid/transfer/:tohomeid", wrapper.Post1HomesHomeidTransferTohomeid)
	router.GET(baseURL+"/1/homes/:homeid/users", wrapper.Get1HomesHomeidUsers)
	router.GET(baseURL+"/1/invites/:invitetoken", wrapper.Get1InvitesInvitetoken)
	router.POST(baseURL+"/1/invites/:invitetoken", wrapper.Post1InvitesInvitetoken)
	router.POST(baseURL+"/1/signals/:signalid", wrapper.Post1SignalsSignalid)
	router.POST(baseURL+"/1/signals/:signalid/delete", wrapper.Post1SignalsSignalidDelete)
	router.POST(baseURL+"/1/signals/:signalid/send", wrapper.Post1SignalsSignalidSend)
	router.GET(baseURL+"/1/users/me", wrapper.Get1UsersMe)
	router.POST(baseURL+"/1/users/me", wrapper.Post1UsersMe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9227juJK/QmgX8F7cdk8PzkuAfUgnmdPZ6UsQp3sfZgcCLZVjdiRSQ1JxPEH+/YCk",
	"JOtCypLjOInj83AmLVFksapY96LvvYDFCaNApfCO7j0RzCHG+s9jwk8YvcAcx8JXDxLOEuCSgH6NCfdD",
	"wiGQhFH1IAQRcJKYf3rHJwgTjooRI3QWJ3KJYsBUIJxKFmNJgpE39OQyAe/IE5ITeu09DKtT+3Pr5HPG",
	"yd+MShzV1nFNeMuiNAYnoOa1C0r0NY2nwAWCu4SDEEjOAeGYpVQiNis+vpoD4pheg3p4TPgP/VygxZwE",
	"c/MN4ShgNCRqdeAIBwEkUqAQEqChQIxah8UshAhhGiJFAqye6mcjdDKH4EZ/MzAEu1Trf2EhDBChM8Zj",
	"M5qYiTmIhFEBaMa4eZCDq/6RYC5JkEaYd4fAhu9pKqWNKT7q5yM0SSAgsyUaJGwB/B2bzQYIRwu8FIjM",
	"0JKlaIGptGJCfwEhYrNZlVjFCzsLFFD7CmorG9RRW6Fm9eW2SLpj+lkxIyHWe0u5BS1Xq5cGIaXRCiYz",
	"DTJwmhEpJRIRtX810RRCNe6Y8IBRxKY/IZA11JbWeHtHpYRPX2GulQQatyM0CAaIcTSYmf8MNIQpvaFs",
	"YWP+h+KJQb9a1tBjAlISei0us602pfwLPMkh4dtVNyHhW9AxB7HSZOyDPHkWefJUgmTopUmIJYQ+1tOb",
	"LXpHnnr4TpIYbN/csuhgdT096a1SPkkigmmgIYuOaait+aaU18s0HwcK03yp/mxQlYT2xzG+BuubGNN0",
	"hgPFfdw6gOLY/iWHmEnwne8F8AzgDihJtD9zUHQHRXdQdAdF51R0B6X1TEqruxrTYptIMH/8O4eZd+T9",
	"23gVzxpnwayxQw2ulsKc42VlpQuHmij0W01LYAFKP+XY0cPQjETqrAdRGprDrOmVJCN0dneEBiRgPg78",
	"XwZWDqQkuMlVXo0NcyCRet/XFHD7eliLmuZzTffm4xm5g9Coxyopmke1hmWtAfSKoWEaHF1Upq4ulOnB",
	"7vPneq77F7kM7/5FJiC6fmAjSQfOV3B9z2RcByIbCvoixlz6ELAi1lUjdPgzFcrxL007ZSwCTPUsHLC2",
	"CvEdidPYO/rwj38MvZhQ86/3xcKESrgGrr4BiqcRhLYJbYBOIytYoSK0giAMuW8+smB2ymhoX0pZmQFn",
	"PXhLm7HKseFRRxw3HggQ2TGtsS3ckgDc27iBpR/BLUTWt6kA7hMawl3F05oupdXJSlOzk25sZUCzGMHS",
	"j3HgK/SDsLN1wKG3BzgjPF5gDv4tcJFlCxqD5mlMQiKXPpvNBFRnn0UMy9XMVGvYFi9k3SZaXQkc+dkC",
	"1mNditf1gbS/52wjHARzRkFGRNpitXNAZyefvn09u0JqBFoRF81ABnMI0YyzOFdDRh+M0AQADU5BYhJB",
	"iC7hr5RwiJUG1ao/n/JUMw36poERxoSKGQcU6k/FCHGYjdBcykQcjccZqKOfyVgkEPhmEz6PfKBjb1jj",
	"vGuQfkMadDi/QNO4p6i3n8dOR52EQCWZEQdvECqkQqn9ZWJ9HLEAR+Rvy2F8DDq6jY7wFDYUexsO4SyV",
	"LSJRvAouEBLr46esAKdAs7NPz5hJRK7n0hWrqBpdDjO1OaWD5k6h2IKSAps5RupwcgU/dUnhCAvpr+Iu",
	"jfc6PNIJIhuMGneKm9QDxm3cv2SpfFLcGXURYQk7IpZrwTbv6Cr7wm4X38mW83TvNESaL+58kYm5Pnbl",
	"coOvunDsnmzMttU8mKv/5JRQP4lS4bJP2xgTB5Lcgt3Q7i3LHiFe5sQXCUBYuDNdXIyy/9wA5i9OmB+x",
	"4MYitMJW09FlOht8FHYdofLXD56N8FvBEBE+vsUkwpkj1aSPSKd+61bsrozJBx/C44fw+CE8fgiPH/LA",
	"+5EHFuSa4qjVBt2hOjfhyRgkWKzyUoSj5go6IIck6Gt7Oc2CjdgaRxvhwTri9hU4eyu/yQHPdJOcQH+H",
	"fJ33SWiSyo3dxxweV+pFvRcjdHwyRFc/hujz+T8/XQ0RyGDTfMwG6awilWNBysfPZxec3GIJX3DAmTvr",
	"0z8C7pi6+wZcsFm2caLDzaUd/5WCkC5npl2GPXnKriijcTCNTj+i81NlEldisGgBAw5I8qUyeiRDJsqu",
	"rJ0yLOeXpx/dC/t2lj2jaaz2ODg+GQzR4OqH+v/P5HouBztIOxr6TbT+0TlVJfUtMuN8y0QizE6iLyCE",
	"daX/nXz7ikz4n/ytnA69hdzYVGQhdMax8kcybTpC5wYEgQYhlljhdcbhr4HW0wOjPQboBpbCCspXK5YN",
	"qvqg+BQkBHL9ETl1H5EXgxX7/hTcLSXKbz1pRWEBQvpwmzfxuILmzXTRBKhg/AeOUlAkySzvgYQB+p+y",
	"SzZEg3mqnuUbHqIBidQDEkVpTKg2SYdoEDP1MGa3OoFkbPJbHGkBpN4RkYcFftEMsZgDLYYjvQU1JsCJ",
	"WjZEK8qpx5l9NmqkjzYhcGa4raOXPX+6P4hsbI7RiFBXVOkF5UdNjtzC2KeQcAj0/tApQ5RJlAodVaCw",
	"QEHmNhWWyiYfd3KeWiOQIk2Aqw10jWeu9x6qgrK7OVYTsBYr7Mw4ZZ9JxRRz1hHlQ9qcltNDCcLrLEHY",
	"hNn7OPLP6pQ/wg+1jdDhLFMwUZpz9f4Ti+Gc3hKb+zpnMXSO0/Rw5+1+nhGm3ddzU7ube6127qqx7LEZ",
	"Nc0a19ZecpE3LddTwpLI1MTvV4zG0mkEtgMVMXrdZzzHITGZuE2MDnfKly3oIxJST7xpJ9iMk2viyPxz",
	"mEGQd6R2YercEugX3vzJCO0pWXLm8YuoUz9RyFm0PflSZv/u+r5yaCwiUL3/LoC7zmfNamk9n5lG/abV",
	"lGvCb4USq9pi+dfIaDll/6aAcKi8fsm01x8DFtq+zXW3ss42OV06InKxUXNQH2fdLJMXpexovckzl+cM",
	"vUuYcRDzs8+ZQ7p0RinOLk6a+z5hcYyRgARzZQqgs4sToUzyOdyNEFwfoWA2DHE3jFwC4yHwwo4VLiIc",
	"V8zYKkCfidCpJxxFpSje+akYoqAK66gXVCb64wRpssrjuOExgZjHADMBuSmlzi5OMsJkKdycPjZZ+gNb",
	"oqXGh67NMTHp4AjotZyjOBUSTQF9uNMywBxrtf3pUoJAOAgYD7NIal69qnwXJBIIhtpdnpEoghAtiJyj",
	"v4EzRGaIQgBCYL40ML/X//vtt44401jfbWJtYknrtQn+DEaLyL/68fSi6OrH5LGJmmE5d72ZTiknvzuo",
	"lZKvtalmKerrDoV/z1D4d8UxFTPga8LiXSukvmtn1HzTls/42v0UmykvOJuRCBwN2ictndinxFSdO/qE",
	"ht7XNnv0ql+HkQH25eRztpVEUfbuMQ0vma0xyWGz79pnLsHY/ZCXN2Y55+q124FuuwAgzNiuKDLqekVA",
	"q3tUKVtyhoISTm5xsPQTFpFgaVFaLFw6CurpTY++AjXcAead3LR9QBIZbcoEOj4YpJzI5UQR2IDJcCrn",
	"H7QPG7GF2V8qddWi9lVPspLEysPvPPKOvLxbBydkRI2au47YFEdjM+lY/b839ETAkgy3WJDAO/IuAYfo",
	"v9GCK8MKB4Guy2JIHYmBQIkRZ+g/4E4da2WMQYxJ9J9DdAkxE8OV2SyGRe7QG5rpRxxwmK/BaLTc4gKh",
	"TpcWL3XIXz1x1FzphqlGktMbZvG5NWhQg/LBHTaVDxdAdXWrNwEaNlZHcs5Zej3XG82Hc7xo+YJQxPEi",
	"K6esfa8jSDfQlSH02ApvGu57eNAdUDPWFMdqx+P/0xj6aiwvtbJXHAUve3p8ce6Vemq8D6P3o/fZ5W0U",
	"J8Q78n4dvR/96g29BMu5ZsfxL+OClr72ocw5ZkLaANEjSqwx+n+aNbwJZFjPUPLbsdoUMmyvcFzU3Z0r",
	"Gl4wIX8pHMRvZtmhx42R8TETPwGjEqgsciImcjS+e7dYLN4pWrxLeQQ0YFk7q5HZ6yS6y4HVBLDutzHU",
	"QEq4WlbyFPQlK6Uw0of371vg/ymMQ9AN3HIM3AJi9fVKvHlHf6wE2x9eiTbenw9/qpFlyuc9hE2S/wYy",
	"K/6Mch+5hfjqiK6j/T+hRHqDyydCnaVGzIJB66g1iNSiSOFx6Dgppm4HYZ31XPWKbuO07OygOGrHLCh0",
	"jNzlMbEU9XUg9WOOzPi++JuED26haUx+hOm2+eB4tbyXXcyUeRN/uGvPztVYop4pFeDlDrGHK5NV6TYs",
	"0aBudP25I2as3yzSRt1nkNLPzX7j/OqKcgdSKzvWrLX8wzJrGjNqc66sXpL5Bni0cuOzjQEqA3bKn/b7",
	"Sm0wnqx4oY0/Mxu7A2uGEEEWvrNy5Kl+/7QC0qyx/yzYw1rcPyO2xner7n8r22lPT4/J3Lxtij6dN9x/",
	"ditnfS101a/RCgejnTJdKXfrhE1XIWxJztluTFjDeavRT8WDRa78rTBjrTbARfli3LOx53ZkYnf2NPds",
	"+VMmx0FEstZ9N39OzibHX87QlEmkh6OMhtvk0IkG6SOTJxqg5+XQfSGzliOdQ3l5RHbbBpdJIRWRvT0X",
	"PdbyE3dAsTpu7w2xUvt0xxijkyv7BxgbPCn2U87km7NQdfVqq2HNpsWyRcnxBoSGo7fTScBns1TyuicX",
	"YFsUFVkHv9ssufrxBJby1e3+c1tRomYh49WPZ+OtvKrNDtUG7tk0Ajd7JaZt3l9dc9tRIU0j8Ksfb66b",
	"PkZg5cJyT/+eKinn1QcW8reM7arGVhxRpd34Pvu3/qdiDLiDYI3k+fj5DGUAIQ0RUijhLHqkZ/Qxggrl",
	"LyqgnSnA1vBCE7LzUztPVLe97z5So1TFRd/fCA2tNxdNQUgUYxnMdTn0XN8JfEtMmV2lRqRM/Nq6nbjg",
	"tAbrjrSC4/IDCxEcI58lyVb7HQNrjCcrVnBeBFUkOdDHgsgoYDEINCNcyFatU+esMs8V5bAdVcslxAxl",
	"n22uVPIy3CdEf70/2sok9SH9RHWGhvG9+aNTXj3D3WP8kAx5p9mi6+RtdpO3S/GGq2lenhnoKMC20NIx",
	"cpcHvt5Zv47h+jsiTYZ7bFEU4nBNhNQ3b2bdEKUT/ugDnvNopRzoebj19VZtOWnfNVW9fZnTLUH9miXP",
	"G0xNWzjMckdGJ/U2EEWLbtZ3tUXmq7YZ7zMTWhuqLWSvt04/V3jkWTSg/YKUrmwqGx2CW+TURv/iPjOr",
	"q1nTFitrtmXuL8uW7rjdzFqrNDVvo579bAXRbkrbW2+Usqmx9vH9DCc7/muhVm6uLHBLjq9MktnSGMdn",
	"aJz/oX95STKUfY8YBZT/UlKFbqtWsxG6mhOBgIYJI+beNpGamxZtHexkRgLEldSKSEykaZAHyC6ULj1G",
	"wtxTn3dbhixIY6DS3B/d+P2mEveUMDT6r05cpIWdlY1KEeLsGoi3kE933Hdhzak7xq4Xeh9emBXZZJu+",
	"p65VV09A6uNkO0bLl36IupsM607RBN5AZab1DhJbBtc27rWfnLrBMGdxL/tAjy+zYtF/2sUY+KRXe0Ll",
	"X722yua91AY40bbqq+1c9aE/qaOm++FcIWcX3t7qljwHlp6hBKt6fVg78dbSzsrp43v1n27B822Q85Ne",
	"bZ1MVaOc4nSeT/ECQwZvnIm6B0W3x0vdoqFPwlEvOszYjVx9M5DZF4hQFxF7qb6chHlCcm9ouN0EaFX3",
	"WklJ9N22LVXcDc2MzCfbOYXn2fJ7RMLSjcEOqVm8fdQhvGltsPidBDcI61tLzAUp25Sdv3dopXjNurh0",
	"taqDhKURry+T1IW7Kjcwr7fvBgLlX2yHxT7n6++ZZNiVRZVTo59p9WRk3D9r6zmIaW60Hps71taeTGV/",
	"ZbdW5ROYamcdEtumPsiprOuszeoHw3oTQrMFhZau3pO5/jFKRVg9Mg94bo+S3zQAB9W+3+52gnlLDP8C",
	"c7l9m1HNehAKm1BLZvfjju8lWxt1yy/TLTxuyRCmTM6Bb5GY+SpXbP4sgbmhc9uSodbFJHvBAqp+E7Kt",
	"CqM2ZD+9j+LHQjqGl/T47QaXvosObeWvSWBV7ia2FWNX3/cKKmVRpPG9+UNfQPrgpN9kzhYZpVzBpK4E",
	"y+JH56tl15HMDEVX2VgL3Uhlsj0LKq3NxB3rH1xfQ57uSuMtEejJzLfsroLxvfmjW9rt8b3zWZv8JFt0",
	"HeGyFnKXOBSraV5qz8qbbJRvMlf3mNHWeaxbnOg1c9ob7FGwcJgAGq5phsaPu4WhxlhqygNbvVK2arRd",
	"a3t/bH6gYo2LoCYBKon+weA8HkqouWe/FufuV5GtPYQv4D2xzd5mVaj3lc1s4QKe3IDojbfuQr+MuZ0p",
	"98rP9zibUSujdnlSnoDUJTlsfrX41i73LtJpRAJ0fHGOLjgL0yBLvKXtPzfhPfz58K8AAAD//6GkFwed",
	"sgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
